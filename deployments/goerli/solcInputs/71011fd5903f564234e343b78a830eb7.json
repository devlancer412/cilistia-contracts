{
  "language": "Solidity",
  "sources": {
    "contracts/core/CIL.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\n/// @notice utility and governance token of the Cilistia protocol. (https://docs.cilistia.com/cil)\ncontract CIL is ERC20, Ownable {\n  /// @notice token initialize state\n  bool public initialized;\n  /// @notice community multiSig contract address\n  address public immutable multiSig;\n\n  /// @notice staking contract address;\n  address public staking;\n\n  /// @notice uniswap addresses\n  address public pool;\n  /// @notice liquidity extension\n  address public liquidityExtension;\n\n  /// @notice fires when initialize token\n  event Initialized(address pool);\n\n  /// @param multiSig_ multi sign contract address\n  constructor(address multiSig_) ERC20(\"Cilistia\", \"CIL\") {\n    multiSig = multiSig_;\n  }\n\n  /**\n   * @dev init cilistia token supply\n   * @param preSale_ preSale contract address\n   * @param airdrop_ airdrop contract address\n   * @param staking_ staking contract address\n   * @param uniswapRouter_ uniswap router address\n   * @param liquidityExtension_ uniswap router address\n   */\n  function init(\n    address preSale_,\n    address airdrop_,\n    address staking_,\n    address uniswapRouter_,\n    address liquidityExtension_\n  ) external onlyOwner {\n    require(!initialized, \"CIL: already initialized\");\n\n    _mint(preSale_, 50_000 * 1e18);\n    _mint(airdrop_, 20_000 * 1e18);\n    _mint(multiSig, 4_930_000 * 1e18); // 5,000,000 - 70,000 = 4,930,000\n\n    staking = staking_;\n    liquidityExtension = liquidityExtension_;\n\n    IUniswapV2Router02 uniswapRouter = IUniswapV2Router02(uniswapRouter_);\n    IUniswapV2Factory uniswapFactory = IUniswapV2Factory(uniswapRouter.factory());\n\n    pool = uniswapFactory.createPair(address(this), uniswapRouter.WETH());\n\n    initialized = true;\n\n    emit Initialized(pool);\n  }\n\n  /**\n   * @dev renounce staking contract address\n   * @param staking_ address of staking contract\n   */\n  function updateStaking(address staking_) external onlyOwner {\n    require(staking_ != address(0), \"CILPreSale: invalid staking address\");\n    staking = staking_;\n  }\n\n  /// @dev setup hook for fee 1% (70% to staking contract, 30% to multiSig wallet)\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual override {\n    if (from == liquidityExtension || to == liquidityExtension || (from != pool && to != pool)) {\n      super._transfer(from, to, amount);\n      return;\n    }\n\n    uint256 totalFee = amount / 100; // 1% of swap amount\n    uint256 toStaking = (totalFee * 7) / 10; // send 70% to staking contract\n\n    super._transfer(from, staking, toStaking);\n    super._transfer(from, multiSig, totalFee - toStaking);\n    super._transfer(from, to, amount - totalFee);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/utils/LiquidityExtension.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IUniswapV2Router02} from \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\n/**\n * @title Liquidity extension contract\n * @notice add liquidity to uniswap router\n */\ncontract LiquidityExtension is Ownable {\n  // uniswap router address\n  address public router;\n\n  /// @param router_ uniswap router address\n  constructor(address router_) {\n    router = router_;\n  }\n\n  /**\n   * @dev add liquidity to uniswap pool\n   * @param tokenA first token address\n   * @param tokenB first token address\n   * @param amountADesired first token deposit amount\n   * @param amountBDesired second token deposit amount\n   * @param amountAMin first token min amount\n   * @param amountBMin second token min amount\n   */\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin\n  ) external {\n    IERC20(tokenA).transferFrom(msg.sender, address(this), amountADesired);\n    IERC20(tokenB).transferFrom(msg.sender, address(this), amountBDesired);\n    IERC20(tokenA).approve(router, amountADesired);\n    IERC20(tokenB).approve(router, amountBDesired);\n    IUniswapV2Router02(router).addLiquidity(\n      tokenA,\n      tokenB,\n      amountADesired,\n      amountBDesired,\n      amountAMin,\n      amountBMin,\n      msg.sender,\n      block.timestamp + 10 minutes\n    );\n    uint256 balanceA = IERC20(tokenA).balanceOf(address(this));\n    IERC20(tokenA).transfer(msg.sender, balanceA);\n    uint256 balanceB = IERC20(tokenB).balanceOf(address(this));\n    IERC20(tokenB).transfer(msg.sender, balanceB);\n  }\n\n  /**\n   * @dev add liquidity to uniswap pool with eth\n   * @param token token address\n   * @param amountTokenDesired token deposit amount\n   * @param amountTokenMin token min amount\n   * @param amountETHMin eth min amount\n   */\n  function addLiquidityETH(\n    address token,\n    uint256 amountTokenDesired,\n    uint256 amountTokenMin,\n    uint256 amountETHMin\n  ) external payable {\n    IERC20(token).transferFrom(msg.sender, address(this), amountTokenDesired);\n    IERC20(token).approve(router, amountTokenDesired);\n    (, uint256 amountETH, ) = IUniswapV2Router02(router).addLiquidityETH{value: msg.value}(\n      token,\n      amountTokenDesired,\n      amountTokenMin,\n      amountETHMin,\n      msg.sender,\n      block.timestamp + 10 minutes\n    );\n    uint256 balance = IERC20(token).balanceOf(address(this));\n    IERC20(token).transfer(msg.sender, balance);\n    if (msg.value > amountETH) transferDust();\n  }\n\n  /// @notice  transfer remainning eth\n  function transferDust() internal {\n    address liquidityProvider = msg.sender;\n    payable(liquidityProvider).transfer(address(this).balance);\n  }\n\n  /**\n   * @dev Recovery functions incase assets are stuck in the contract\n   * @param token token address\n   * @param benefactor receiver address\n   */\n  function recoverLeftoverTokens(address token, address benefactor) public onlyOwner {\n    uint256 leftOverBalance = IERC20(token).balanceOf(address(this));\n    IERC20(token).transfer(benefactor, leftOverBalance);\n  }\n\n  /**\n   * @dev Recovery functions native token are stuck in the contract\n   * @param benefactor receiver address\n   */\n  function recoverNativeToken(address benefactor) public onlyOwner {\n    payable(benefactor).transfer(address(this).balance);\n  }\n\n  /// @notice to receive eth from uniswap router\n  receive() external payable {}\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/CILPreSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/// @notice Cilistia preSale contract address. (https://docs.cilistia.com/cil#tokenomics)\ncontract CILPreSale is Ownable {\n  using SafeERC20 for IERC20;\n\n  /// @notice stable coin addresses\n  address public immutable USDT;\n  address public immutable USDC;\n\n  /// @notice cil token address\n  address public immutable CIL;\n\n  /// @notice multiSig wallet address\n  address public immutable multiSig;\n\n  /// @notice signer address\n  address public immutable signer;\n\n  /// @notice price per CIL\n  uint256 public pricePerCIL = 800;\n\n  /// @notice preSale period\n  uint32 public openingTime;\n  uint32 public closingTime;\n\n  struct Sig {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  /// @notice fires when buy CIL token\n  event Buy(\n    address indexed _executor,\n    string indexed _tokenNameToDeposit,\n    uint256 _deposit,\n    uint256 _withdraw\n  );\n\n  /// @notice fires when set preSale period\n  event SetPeriod(uint32 openingTime, uint32 closingTime);\n\n  /// @notice fires when change price\n  event PriceChanged(uint256 price);\n\n  /**\n   * @param signer_ signer address\n   * @param multiSig_ multi sign address\n   * @param USDT_ usdt address\n   * @param USDC_ usdc address\n   * @param CIL_ cil token address\n   */\n  constructor(address signer_, address multiSig_, address USDT_, address USDC_, address CIL_) {\n    require(signer_ != address(0), \"CILPreSale: invalid signer address\");\n    require(multiSig_ != address(0), \"CILPreSale: invalid multiSig address\");\n    require(USDT_ != address(0), \"CILPreSale: invalid USDT address\");\n    require(USDC_ != address(0), \"CILPreSale: invalid USDC address\");\n    require(CIL_ != address(0), \"CILPreSale: invalid CIL address\");\n    signer = signer_;\n    multiSig = multiSig_;\n    USDT = USDT_;\n    USDC = USDC_;\n    CIL = CIL_;\n  }\n\n  /**\n   * @dev returns airdrop state\n   * @return bool returns true if airdrop is live\n   */\n  function isOpen() public view returns (bool) {\n    return block.timestamp >= openingTime && block.timestamp < closingTime;\n  }\n\n  /**\n   * @dev validates buy function variables\n   * @param amountToDeposit_ deposit token amount\n   * @param tokenNameToDeposit_ token name to deposit\n   * @param sig_ signature of backend wallet\n   * @return isValid ture -> valid, false -> invalid\n   */\n  function _isBuyParamValid(\n    uint256 amountToDeposit_,\n    string memory tokenNameToDeposit_,\n    Sig calldata sig_\n  ) private view returns (bool) {\n    bytes32 messageHash = keccak256(\n      abi.encodePacked(_msgSender(), amountToDeposit_, tokenNameToDeposit_)\n    );\n\n    bytes32 ethSignedMessageHash = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash)\n    );\n\n    return signer == ecrecover(ethSignedMessageHash, sig_.v, sig_.r, sig_.s);\n  }\n\n  /**\n   * @dev buy cil token with stable coins such as usdt, usdc\n   * @param amountToDeposit_ deposit token amount\n   * @param tokenNameToDeposit_ token name to deposit\n   * @param sig_ signature of backend wallet\n   * @return result bought cil token amount\n   */\n  function buy(\n    uint256 amountToDeposit_,\n    string memory tokenNameToDeposit_,\n    Sig calldata sig_\n  ) external returns (uint256 result) {\n    require(isOpen(), \"CILPreSale: not open now\");\n    require(\n      _isBuyParamValid(amountToDeposit_, tokenNameToDeposit_, sig_),\n      \"CILPreSale: invalid signature\"\n    );\n\n    address tokenToDeposit;\n\n    if (keccak256(abi.encodePacked(tokenNameToDeposit_)) == keccak256(abi.encodePacked(\"USDT\")))\n      tokenToDeposit = USDT;\n    else if (\n      keccak256(abi.encodePacked(tokenNameToDeposit_)) == keccak256(abi.encodePacked(\"USDC\"))\n    ) tokenToDeposit = USDC;\n    else revert(\"CILPreSale: incorrect deposit token\");\n\n    uint256 tokenDecimalToDeposit = IERC20Metadata(tokenToDeposit).decimals();\n    uint256 multiplier = IERC20Metadata(CIL).decimals() - tokenDecimalToDeposit;\n    uint256 currentAmountInUSD = (IERC20(CIL).balanceOf(_msgSender()) * pricePerCIL) /\n      100 /\n      (10 ** multiplier);\n\n    require(\n      amountToDeposit_ + currentAmountInUSD <= 1000 * (10 ** tokenDecimalToDeposit),\n      \"CILPreSale: max deposit amount is $1000 per wallet\"\n    );\n\n    uint256 _balance = balance();\n    uint256 amountWithdrawalCIL = (amountToDeposit_ * (10 ** multiplier) * 100) / pricePerCIL;\n    require(amountWithdrawalCIL <= _balance, \"CILPreSale: insufficient withdrawal amount\");\n    require(\n      IERC20(tokenToDeposit).balanceOf(_msgSender()) >= amountToDeposit_,\n      \"CILPreSale: insufficient deposit balance\"\n    );\n\n    IERC20(tokenToDeposit).safeTransferFrom(_msgSender(), multiSig, amountToDeposit_);\n    IERC20(CIL).safeTransfer(_msgSender(), amountWithdrawalCIL);\n\n    emit Buy(_msgSender(), tokenNameToDeposit_, amountToDeposit_, amountWithdrawalCIL);\n\n    return amountWithdrawalCIL;\n  }\n\n  /**\n   * @dev return balance of cil token\n   * @return amount amount of cil token\n   */\n  function balance() public view returns (uint256) {\n    return IERC20(CIL).balanceOf(address(this));\n  }\n\n  /**\n   * @dev set preSale settings\n   * @param openingTime_ opening time of airdrop\n   * @param closingTime_ closing time of airdrop\n   */\n  function setPeriod(uint32 openingTime_, uint32 closingTime_) external onlyOwner {\n    // require(!isOpen(), \"CILPreSale: already opened\");\n    require(closingTime_ > openingTime_, \"CILPreSale: invalid time window\");\n    openingTime = openingTime_;\n    closingTime = closingTime_;\n\n    emit SetPeriod(openingTime, closingTime);\n  }\n\n  /**\n   * @dev withdraw all CIL to another address\n   * @param recipient_ address to withdraw cil token\n   */\n  function withdraw(address recipient_) external onlyOwner {\n    uint256 _balance = balance();\n    IERC20(CIL).safeTransfer(recipient_, _balance);\n  }\n\n  /**\n   * @dev renounce price of CIL ($ per CIL)\n   * @param priceCIL_ price of the cil token\n   */\n  function renouncePrice(uint256 priceCIL_) external onlyOwner {\n    require(priceCIL_ > 0, \"CILPreSale: price must be greater than zero\");\n    pricePerCIL = priceCIL_;\n\n    emit PriceChanged(priceCIL_);\n  }\n}\n"
    },
    "contracts/utils/CILAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/// @notice CIL Airdrop contract, each og can claim 7.1% of total amount.  (https://docs.cilistia.com/cil#tokenomics)\ncontract CILAirdrop is Ownable {\n  using SafeERC20 for IERC20;\n\n  /// @notice cil token addresses\n  address public immutable CIL;\n\n  /// @notice signer address\n  address public immutable signer;\n\n  /// @notice airdrop datas\n  uint32 public openingTime;\n  uint32 public closingTime;\n  uint32 public ogNumber;\n  uint256 public totalClaimableAmountPerWallet;\n\n  /// @notice address => claimed timestamp\n  mapping(address => uint256) public lastClaimedTime;\n\n  struct Sig {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  /// @notice fires when set period\n  event SetPeriod(uint32 openingTime, uint32 closingTime);\n\n  /// @notice fires when claimed\n  event Claimed(address to, uint256 amount);\n\n  /**\n   * @param signer_ signer address\n   * @param CIL_ cil token address\n   */\n  constructor(address signer_, address CIL_) {\n    require(signer_ != address(0), \"CILAirdrop: invalid signer address\");\n    require(CIL_ != address(0), \"CILAirdrop: invalid CIL address\");\n    signer = signer_;\n    CIL = CIL_;\n  }\n\n  /**\n   * @dev returns airdrop state\n   * @return bool returns true if airdrop is live\n   */\n  function isOpen() public view returns (bool) {\n    return block.timestamp >= openingTime && block.timestamp < closingTime;\n  }\n\n  /**\n   * @dev validates buy function variables\n   * @return isValid ture -> valid, false -> invalid\n   */\n  function _isClaimParamValid(Sig calldata sig) private view returns (bool) {\n    bytes32 messageHash = keccak256(abi.encodePacked(_msgSender()));\n\n    bytes32 ethSignedMessageHash = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash)\n    );\n\n    return signer == ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s);\n  }\n\n  /**\n   * @dev claim cil token\n   * @param sig signature of signer\n   * @return result return claimed cil token amount\n   */\n  function claim(Sig calldata sig) external returns (uint256 result) {\n    require(isOpen(), \"CILAirdrop: not open now\");\n    require(_isClaimParamValid(sig), \"CILAirdrop: invalid signature\");\n    require(\n      lastClaimedTime[_msgSender()] + 1 days <= block.timestamp,\n      \"CILAirdrop: already claimed today\"\n    );\n\n    uint256 tokenAmount = totalClaimableAmountPerWallet / 14;\n\n    lastClaimedTime[_msgSender()] = block.timestamp;\n    IERC20(CIL).safeTransfer(_msgSender(), tokenAmount);\n\n    emit Claimed(_msgSender(), tokenAmount);\n    return tokenAmount;\n  }\n\n  /**\n   * @dev return balance of cil token\n   * @return amount amount of cil token\n   */\n  function balance() public view returns (uint256) {\n    return IERC20(CIL).balanceOf(address(this));\n  }\n\n  /**\n   * @dev set airdrop settings\n   * @param openingTime_ opening time of airdrop\n   * @param closingTime_ closing time of airdrop\n   * @param ogNumber_ number of og member\n   */\n  function setPeriod(\n    uint32 openingTime_,\n    uint32 closingTime_,\n    uint32 ogNumber_\n  ) external onlyOwner {\n    // require(!isOpen(), \"CILAirdrop: already opened\");\n    require(closingTime_ > openingTime_, \"CILAirdrop: invalid time window\");\n    openingTime = openingTime_;\n    closingTime = closingTime_;\n    ogNumber = ogNumber_;\n    totalClaimableAmountPerWallet = balance() / ogNumber_;\n\n    emit SetPeriod(openingTime, closingTime);\n  }\n\n  /**\n   * @dev withdraw all CIL to another address\n   * @param recipient_ address to withdraw cil token\n   */\n  function withdraw(address recipient_) external onlyOwner {\n    uint256 _balance = balance();\n    IERC20(CIL).safeTransfer(recipient_, _balance);\n  }\n}\n"
    },
    "contracts/core/MarketPlace.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IUniswapV2Factory} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport {IUniswapV2Pair} from \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {ReentrancyGuard} from \"../utils/ReentrancyGuard.sol\";\nimport {ICILStaking} from \"./interfaces/ICILStaking.sol\";\n\n/**\n * @title Cilistia P2P MarketPlace\n * @notice cilistia MarketPlace contract\n * price decimals 8\n * percent decimals 2\n */\ncontract MarketPlace is Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  struct PositionCreateParam {\n    uint128 price;\n    uint128 amount;\n    uint128 minAmount;\n    uint128 maxAmount;\n    bool priceType; // 0 => fixed, 1 => percent\n    uint8 paymentMethod; // 0 => BankTransfer, 1 => Other\n    address token;\n  }\n\n  struct Position {\n    uint128 price;\n    uint128 amount;\n    uint128 minAmount;\n    uint128 maxAmount;\n    uint128 offeredAmount;\n    bool priceType; // 0 => fixed, 1 => percent\n    uint8 paymentMethod; // 0 => BankTransfer, 1 => Other\n    address token;\n    address creator;\n  }\n\n  struct Offer {\n    bytes32 positionKey;\n    uint128 amount;\n    address creator;\n    bool released;\n    bool canceled;\n  }\n\n  /// @notice multi sign wallet address of team\n  address public immutable multiSig;\n\n  /// @notice cil address\n  address public immutable cil;\n  /// @notice uniswap router address\n  address public cilPair;\n  /// @notice cil staking address\n  address public cilStaking;\n  /// @notice chainlink pricefeeds (address => address)\n  mapping(address => address) public pricefeeds;\n\n  /// @notice positions (bytes32 => Position)\n  mapping(bytes32 => Position) public positions;\n  /// @notice offers (bytes32 => Offer)\n  mapping(bytes32 => Offer) public offers;\n  /// @notice fee decimals 2\n  uint256 public feePoint = 100;\n\n  /// @notice blocked address\n  mapping(address => bool) public isBlocked;\n\n  /// @notice fires when create position\n  event PositionCreated(\n    bytes32 key,\n    uint128 price,\n    uint128 amount,\n    uint128 minAmount,\n    uint128 maxAmount,\n    bool priceType,\n    uint8 paymentMethod,\n    address indexed token,\n    address indexed creator,\n    string terms\n  );\n\n  /// @notice fires when update position\n  event PositionUpdated(bytes32 indexed key, uint128 amount, uint128 offeredAmount);\n\n  /// @notice fires when position state change\n  event OfferCreated(\n    bytes32 offerKey,\n    bytes32 indexed positionKey,\n    address indexed creator,\n    uint128 amount,\n    string terms\n  );\n\n  /// @notice fires when cancel offer\n  event OfferCanceled(bytes32 indexed key);\n\n  /// @notice fires when release offer\n  event OfferReleased(bytes32 indexed key);\n\n  /// @notice fires when block account\n  event AccountBlocked(address account);\n\n  /**\n   * @param cil_ cilistia token address\n   * @param multiSig_ multi sign wallet address\n   */\n  constructor(address cil_, address multiSig_) {\n    cil = cil_;\n    multiSig = multiSig_;\n  }\n\n  modifier initialized() {\n    require(cilStaking != address(0), \"MarketPlace: not initialized yet\");\n    _;\n  }\n\n  modifier whitelisted(address token) {\n    if (token != cil) {\n      require(pricefeeds[token] != address(0), \"MarketPlace: token not whitelisted\");\n    }\n    _;\n  }\n\n  modifier noBlocked() {\n    require(!isBlocked[msg.sender], \"MarketPlace: blocked address\");\n    _;\n  }\n\n  modifier validPosition(bytes32 key) {\n    require(positions[key].creator != address(0), \"MarketPlace: not exist such position\");\n    _;\n  }\n\n  /// @dev calcualate key of position\n  function getPositionKey(\n    uint8 paymentMethod,\n    uint128 price,\n    address token,\n    address creator,\n    uint256 amount,\n    uint128 minAmount,\n    uint128 maxAmount,\n    uint256 timestamp\n  ) public pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encodePacked(\n          paymentMethod,\n          price,\n          token,\n          amount,\n          minAmount,\n          maxAmount,\n          creator,\n          timestamp\n        )\n      );\n  }\n\n  /// @dev calcualate key of position\n  function getOfferKey(\n    bytes32 positionKey,\n    uint256 amount,\n    address creator,\n    uint256 timestamp\n  ) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(positionKey, amount, creator, timestamp));\n  }\n\n  /**\n   * @dev get token price\n   * @param token address of token\n   * @return price price of token\n   */\n  function getTokenPrice(address token) public view returns (uint256) {\n    if (token == cil) {\n      return getCilPrice();\n    }\n\n    require(pricefeeds[token] != address(0), \"MarketPlace: token not whitelisted\");\n\n    (, int256 answer, , , ) = AggregatorV3Interface(pricefeeds[token]).latestRoundData();\n\n    return uint256(answer);\n  }\n\n  /**\n   * @dev get cil token price from uniswap\n   * @return price price of cil token\n   */\n  function getCilPrice() public view returns (uint256) {\n    bool isFirst = IUniswapV2Pair(cilPair).token0() == cil;\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(cilPair).getReserves();\n\n    uint256 ethPrice = getTokenPrice(address(0));\n    uint256 price = isFirst\n      ? ((ethPrice * reserve1) / reserve0)\n      : ((ethPrice * reserve0) / reserve1);\n\n    return price;\n  }\n\n  /**\n   * @dev get staking amount with eth\n   * @param user wallet address\n   * @return totalAmount amount of staked cil with usd\n   */\n  function getStakedCil(address user) public view returns (uint256 totalAmount) {\n    uint256 cilPrice = getCilPrice();\n    totalAmount = (ICILStaking(cilStaking).lockableCil(user) * cilPrice) / 1e18;\n  }\n\n  /**\n   * @dev create position\n   * @param params position create params\n   * @param terms terms of position\n   */\n  function createPosition(PositionCreateParam memory params, string memory terms)\n    external\n    payable\n    initialized\n    whitelisted(params.token)\n    noBlocked\n    nonReentrant\n  {\n    bytes32 key = getPositionKey(\n      params.paymentMethod,\n      params.price,\n      params.token,\n      msg.sender,\n      params.amount,\n      params.minAmount,\n      params.maxAmount,\n      block.timestamp\n    );\n\n    positions[key] = Position(\n      params.price,\n      params.amount,\n      params.minAmount,\n      params.maxAmount,\n      0,\n      params.priceType,\n      params.paymentMethod,\n      params.token,\n      msg.sender\n    );\n\n    if (params.token == address(0)) {\n      require(params.amount == msg.value, \"MarketPlace: invalid eth amount\");\n    } else {\n      IERC20(params.token).transferFrom(msg.sender, address(this), params.amount);\n    }\n\n    emit PositionCreated(\n      key,\n      params.price,\n      params.amount,\n      params.minAmount,\n      params.maxAmount,\n      params.priceType,\n      params.paymentMethod,\n      params.token,\n      msg.sender,\n      terms\n    );\n  }\n\n  /**\n   * @dev increase position amount\n   * @param key key of position\n   * @param amount amount to increase\n   */\n  function increasePosition(bytes32 key, uint128 amount)\n    external\n    payable\n    initialized\n    noBlocked\n    validPosition(key)\n    nonReentrant\n  {\n    require(positions[key].creator == msg.sender, \"MarketPlace: not owner of this position\");\n\n    positions[key].amount += amount;\n\n    if (positions[key].token == address(0)) {\n      require(amount == msg.value, \"MarketPlace: invalid eth amount\");\n    } else {\n      IERC20(positions[key].token).transferFrom(msg.sender, address(this), amount);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n  }\n\n  /**\n   * @dev decrease position amount\n   * @param key key of position\n   * @param amount amount to increase\n   */\n  function decreasePosition(bytes32 key, uint128 amount)\n    external\n    initialized\n    noBlocked\n    validPosition(key)\n    nonReentrant\n  {\n    require(positions[key].creator == msg.sender, \"MarketPlace: not owner of this position\");\n    require(\n      positions[key].amount >= positions[key].offeredAmount + amount,\n      \"MarketPlace: insufficient amount\"\n    );\n\n    positions[key].amount -= amount;\n\n    if (positions[key].token == address(0)) {\n      payable(msg.sender).transfer(amount);\n    } else {\n      IERC20(positions[key].token).transfer(msg.sender, amount);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n  }\n\n  /**\n   * @dev create offer\n   * @param positionKey key of position\n   * @param amount amount to offer\n   * @param terms terms of position\n   */\n  function createOffer(\n    bytes32 positionKey,\n    uint128 amount,\n    string memory terms\n  ) external initialized noBlocked nonReentrant {\n    require(positions[positionKey].creator != address(0), \"MarketPlace: such position don't exist\");\n\n    require(positions[positionKey].minAmount <= amount, \"MarketPlace: amount less than min\");\n    require(positions[positionKey].maxAmount >= amount, \"MarketPlace: amount exceed max\");\n\n    uint256 lockableCil = getStakedCil(positions[positionKey].creator);\n    require(lockableCil > amount, \"MarketPlace: insufficient staking amount for offer\");\n\n    uint256 decimals = 18;\n    uint256 price = positions[positionKey].price;\n\n    if (positions[positionKey].token != address(0)) {\n      decimals = IERC20Metadata(positions[positionKey].token).decimals();\n    }\n\n    if (positions[positionKey].priceType) {\n      if (positions[positionKey].token == cil) {\n        price = (getCilPrice() * positions[positionKey].price) / 10000;\n      } else {\n        price =\n          (getTokenPrice(positions[positionKey].token) * positions[positionKey].price) /\n          10000;\n      }\n    }\n\n    uint256 tokenAmount = (amount * 10**decimals) / price;\n    uint256 cilAmount = (amount * 1e18) / getCilPrice();\n\n    ICILStaking(cilStaking).lock(\n      positions[positionKey].creator,\n      ICILStaking(cilStaking).lockedCil(positions[positionKey].creator) + cilAmount\n    );\n\n    bytes32 key = getOfferKey(positionKey, amount, msg.sender, block.timestamp);\n\n    positions[positionKey].offeredAmount += uint128(tokenAmount);\n    offers[key] = Offer(positionKey, uint128(tokenAmount), msg.sender, false, false);\n\n    emit OfferCreated(key, positionKey, msg.sender, amount, terms);\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n  }\n\n  /**\n   * @dev cancel offer\n   * @param key key of offer\n   */\n  function cancelOffer(bytes32 key) external noBlocked nonReentrant {\n    require(offers[key].creator == msg.sender, \"MarketPlace: you aren't creator of this offer\");\n    require(!offers[key].released && !offers[key].canceled, \"MarketPlace: offer already finished\");\n\n    offers[key].canceled = true;\n    positions[offers[key].positionKey].offeredAmount -= offers[key].amount;\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n    emit OfferCanceled(key);\n  }\n\n  /**\n   * @dev release offer\n   * @param key key of offer\n   */\n  function releaseOffer(bytes32 key) external noBlocked {\n    bytes32 positionKey = offers[key].positionKey;\n    require(\n      positions[positionKey].creator == msg.sender,\n      \"MarketPlace: you aren't creator of this position\"\n    );\n    require(!offers[key].released && !offers[key].canceled, \"MarketPlace: offer already finished\");\n\n    offers[key].released = true;\n    positions[positionKey].amount -= offers[key].amount;\n    positions[positionKey].offeredAmount -= offers[key].amount;\n\n    uint256 fee = (offers[key].amount * feePoint) / 10000;\n    if (positions[positionKey].token == address(0)) {\n      payable(offers[key].creator).transfer(offers[key].amount - fee);\n      payable(multiSig).transfer(fee);\n    } else {\n      IERC20(positions[positionKey].token).transfer(offers[key].creator, offers[key].amount - fee);\n      IERC20(positions[positionKey].token).transfer(multiSig, fee);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n    emit OfferReleased(key);\n  }\n\n  /**\n   * @dev set staking contract address\n   * @param cilStaking_ staking contract address\n   * @param cilPair_ address of cil/eth pair\n   * @param ethPricefeed_ weth pricefeed contract address\n   */\n  function init(\n    address cilStaking_,\n    address cilPair_,\n    address ethPricefeed_\n  ) external onlyOwner {\n    cilStaking = cilStaking_;\n    cilPair = cilPair_;\n\n    bool isFirst = IUniswapV2Pair(cilPair).token0() == cil;\n    pricefeeds[address(0)] = ethPricefeed_;\n    pricefeeds[\n      isFirst ? IUniswapV2Pair(cilPair).token1() : IUniswapV2Pair(cilPair).token0()\n    ] = ethPricefeed_;\n  }\n\n  /**\n   * @dev set token price feed\n   * @param token address of token\n   * @param pricefeed address of chainlink aggregator\n   */\n  function setPriceFeed(address token, address pricefeed) external onlyOwner {\n    pricefeeds[token] = pricefeed;\n  }\n\n  /**\n   * @dev force cancel offer\n   * @param key key of offer\n   */\n  function forceCancelOffer(bytes32 key) external onlyOwner {\n    require(!offers[key].released && !offers[key].canceled, \"MarketPlace: offer already finished\");\n\n    offers[key].canceled = true;\n    positions[offers[key].positionKey].offeredAmount -= offers[key].amount;\n\n    emit OfferCanceled(key);\n  }\n\n  /**\n   * @dev force remove position\n   * @param key key of position\n   */\n  function forceRemovePosition(bytes32 key) external onlyOwner {\n    uint256 positionAmount = positions[key].amount;\n    isBlocked[positions[key].creator] = true;\n    positions[key].amount = 0;\n    ICILStaking(cilStaking).remove(positions[key].creator);\n\n    if (positions[key].token == address(0)) {\n      payable(multiSig).transfer(positionAmount);\n    } else {\n      IERC20(positions[key].token).transfer(multiSig, positionAmount);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n    emit AccountBlocked(positions[key].creator);\n  }\n}\n"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n  // Booleans are more expensive than uint256 or any type that takes up a full\n  // word because each write operation emits an extra SLOAD to first read the\n  // slot's contents, replace the bits taken up by the boolean, and then write\n  // back. This is the compiler's defense against contract upgrades and\n  // pointer aliasing, and it cannot be disabled.\n\n  // The values being non-zero value makes deployment a bit more expensive,\n  // but in exchange the refund on every call to nonReentrant will be lower in\n  // amount. Since refunds are capped to a percentage of the total\n  // transaction's gas, it is best to keep them low in cases like this one, to\n  // increase the likelihood of the full refund coming into effect.\n  uint256 private constant _NOT_ENTERED = 1;\n  uint256 private constant _ENTERED = 2;\n\n  uint256 private _status;\n\n  constructor() {\n    _status = _NOT_ENTERED;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    // On the first call to nonReentrant, _notEntered will be true\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n    // Any calls to nonReentrant after this point will fail\n    _status = _ENTERED;\n\n    _;\n\n    // By storing the original value once again, a refund is triggered (see\n    // https://eips.ethereum.org/EIPS/eip-2200)\n    _status = _NOT_ENTERED;\n  }\n}\n"
    },
    "contracts/core/interfaces/ICILStaking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\n/// @notice cilistia staking contract interface\ninterface ICILStaking {\n  /// @notice fires when stake state changes\n  event StakeUpdated(address user, uint256 stakedAmount, uint256 lockedAmount);\n\n  /// @notice fires when unstake token\n  event UnStaked(address user, uint256 rewardAmount);\n\n  /// @dev unstake staked token\n  function lock(address user, uint256 amount) external;\n\n  /// @dev remove staking data\n  function remove(address user) external;\n\n  /// @dev return colleted token amount\n  function collectedToken(address user) external view returns (uint256);\n\n  /// @dev return lockable token amount\n  function lockableCil(address user) external view returns (uint256);\n\n  /// @dev return locked token amount\n  function lockedCil(address user) external view returns (uint256);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/core/CILStaking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ICILStaking} from \"./interfaces/ICILStaking.sol\";\n\n/// @notice cilistia staking contract\ncontract CILStaking is ICILStaking {\n  /// @notice multi sign wallet address of team\n  address public immutable multiSig;\n  /// @notice cil token address\n  address public immutable cil;\n  /// @notice p2p marketplace contract address\n  address public immutable marketplace;\n\n  struct Stake {\n    uint256 tokenAmount; // amount of tokens locked in a stake\n    uint256 lockedAmount; // amount of tokens locked in a stake\n    uint256 stakedTime; // start time of locking\n  }\n\n  /// @notice active stakes for each user\n  mapping(address => Stake) public stakes;\n\n  /// @notice total staked token amount\n  uint256 public totalStakedAmount;\n  uint256 public totalNegativePoint;\n\n  /// @notice lock time - immutable 1 weeks\n  uint256 public immutable lockTime = 1 weeks;\n\n  /**\n   * @param cil_ cil token address\n   * @param marketplace_ marketplace address\n   * @param multiSig_ multi sign wallet address\n   */\n  constructor(\n    address cil_,\n    address marketplace_,\n    address multiSig_\n  ) {\n    cil = cil_;\n    marketplace = marketplace_;\n    multiSig = multiSig_;\n  }\n\n  /**\n   * @dev stake token with amount\n   * @param amount token amount to stake\n   */\n  function stake(uint256 amount) external {\n    Stake memory newStake = stakes[msg.sender];\n    newStake.tokenAmount += _collectedTokenAmount(msg.sender);\n\n    newStake.tokenAmount += amount;\n    totalStakedAmount += (newStake.tokenAmount - stakes[msg.sender].tokenAmount);\n    uint256 negativePoint = totalNegativePoint + (newStake.tokenAmount * block.timestamp);\n    totalNegativePoint =\n      negativePoint -\n      (stakes[msg.sender].tokenAmount * stakes[msg.sender].stakedTime);\n    newStake.stakedTime = block.timestamp;\n\n    stakes[msg.sender] = newStake;\n\n    IERC20(cil).transferFrom(msg.sender, address(this), amount);\n\n    emit StakeUpdated(msg.sender, newStake.tokenAmount, newStake.lockedAmount);\n  }\n\n  /**\n   * @dev unstake staked token\n   * @param amount token amount to unstake\n   */\n  function unStake(uint256 amount) external {\n    uint256 rewardAmount = _collectedTokenAmount(msg.sender);\n\n    Stake memory newStake = stakes[msg.sender];\n    uint256 newTotalStakedAmount = totalStakedAmount;\n\n    uint256 withdrawAmount = amount;\n\n    if (newStake.tokenAmount + rewardAmount < newStake.lockedAmount + amount) {\n      withdrawAmount = newStake.tokenAmount + rewardAmount - newStake.lockedAmount;\n    }\n\n    newStake.tokenAmount += rewardAmount;\n    newStake.tokenAmount -= withdrawAmount;\n\n    newTotalStakedAmount += rewardAmount;\n    newTotalStakedAmount -= withdrawAmount;\n\n    uint256 negativePoint = totalNegativePoint + (newStake.tokenAmount * block.timestamp);\n    totalNegativePoint =\n      negativePoint -\n      (stakes[msg.sender].tokenAmount * stakes[msg.sender].stakedTime);\n\n    stakes[msg.sender] = newStake;\n    totalStakedAmount = newTotalStakedAmount;\n\n    IERC20(cil).transfer(msg.sender, withdrawAmount);\n\n    emit StakeUpdated(msg.sender, newStake.tokenAmount, newStake.lockedAmount);\n    emit UnStaked(msg.sender, withdrawAmount);\n  }\n\n  /**\n   * @dev return colleted token amount\n   * @return collectedAmount total collected token amount\n   */\n  function collectedToken(address user) external view returns (uint256 collectedAmount) {\n    collectedAmount = _collectedTokenAmount(user);\n  }\n\n  /**\n   * @dev return colleted token amount\n   * @param user user address\n   * @return stakingAmount lockable staking token amount\n   */\n  function lockableCil(address user) external view returns (uint256 stakingAmount) {\n    stakingAmount = stakes[user].tokenAmount - stakes[user].lockedAmount;\n  }\n\n  /**\n   * @dev return colleted token amount\n   * @param user user address\n   * @return stakingAmount unlocked staking token amount\n   */\n  function lockedCil(address user) external view returns (uint256 stakingAmount) {\n    stakingAmount = stakes[user].lockedAmount;\n  }\n\n  /**\n   * @dev lock staked token: called from marketplace contract\n   * @param amount token amount to lock\n   */\n  function lock(address user, uint256 amount) external {\n    require(msg.sender == marketplace, \"CILStaking: forbidden\");\n    require(stakes[user].tokenAmount >= amount, \"CILStaking: insufficient staking amount\");\n\n    stakes[user].lockedAmount = amount;\n\n    emit StakeUpdated(user, stakes[user].tokenAmount, amount);\n  }\n\n  /// @dev remove staking data\n  function remove(address user) external {\n    require(msg.sender == marketplace, \"CILStaking: forbidden\");\n\n    Stake memory newStake = stakes[user];\n\n    uint256 reward = _collectedTokenAmount(user) + newStake.stakedTime;\n\n    newStake.stakedTime = block.timestamp;\n    newStake.tokenAmount = 0;\n    newStake.lockedAmount = 0;\n\n    stakes[user] = newStake;\n\n    IERC20(cil).transfer(multiSig, reward);\n\n    emit StakeUpdated(user, 0, 0);\n  }\n\n  /// @dev return total releasable token amount of staking contract\n  function _totalReleasable() private view returns (uint256) {\n    return IERC20(cil).balanceOf(address(this)) - totalStakedAmount;\n  }\n\n  /// @dev return total stake point of staking contract stake point = amount * period\n  function _totalStakePoint() private view returns (uint256 totalStakePoint) {\n    totalStakePoint = totalStakedAmount * block.timestamp - totalNegativePoint;\n  }\n\n  /// @dev get collected token amount\n  function _collectedTokenAmount(address user) private view returns (uint256) {\n    uint256 totalReleasable = _totalReleasable();\n    uint256 totalStakePoint = _totalStakePoint();\n    uint256 stakePoint = stakes[user].tokenAmount * (block.timestamp - stakes[user].stakedTime);\n\n    if (stakePoint == 0) {\n      return 0;\n    }\n\n    return (totalReleasable * stakePoint) / totalStakePoint;\n  }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {ERC20Permit, ERC20} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract MockERC20 is ERC20Permit {\n  uint8 private immutable _decimals;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) ERC20Permit(name_) ERC20(name_, symbol_) {\n    _decimals = decimals_;\n  }\n\n  function mint(address to, uint256 amount) external {\n    _mint(to, amount);\n  }\n\n  function burn(address account, uint256 amount) external {\n    _burn(account, amount);\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}