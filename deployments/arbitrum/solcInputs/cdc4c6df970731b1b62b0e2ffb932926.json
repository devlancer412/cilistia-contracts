{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/core/CIL.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IPeripheryImmutableState} from \"../uniswap-contracts/interfaces/IPeripheryImmutableState.sol\";\nimport {IUniswapV3Factory} from \"../uniswap-contracts/interfaces/IUniswapV3Factory.sol\";\nimport {IUniswapV3Pool} from \"../uniswap-contracts/interfaces/IUniswapV3Pool.sol\";\nimport {ICIL} from \"./interfaces/ICIL.sol\";\n\n/// @notice utility and governance token of the Cilistia protocol. (https://docs.cilistia.com/cil)\ncontract CIL is ICIL, ERC20, Ownable {\n  /// @notice token initialize state\n  bool public initialized;\n  /// @notice community multiSig contract address\n  address public immutable multiSig;\n\n  /// @notice staking contract address;\n  address public staking;\n\n  /// @notice uniswap addresses\n  address public pool;\n  /// @notice fee exceptions\n  address public nonfungiblePositionManager;\n  address public liquidityExtension;\n\n  /// @notice fires when initialize token\n  event Initialized(address pool);\n\n  /// @param multiSig_ multi sign contract address\n  constructor(address multiSig_) ERC20(\"Cilistia\", \"CIL\") {\n    multiSig = multiSig_;\n  }\n\n  /**\n   * @dev init cilistia token supply\n   * @param preSale_ preSale contract address\n   * @param ogAirdrop_ airdrop contract address\n   * @param trueOgAirdrop_ airdrop contract address\n   * @param staking_ staking contract address\n   * @param uniswapRouter_ uniswap router address\n   * @param liquidityExtension_ uniswap router address\n   * @param sqrtPriceX96 sqrtPriceX96 to initialize token\n   */\n  function init(\n    address preSale_,\n    address ogAirdrop_,\n    address trueOgAirdrop_,\n    address staking_,\n    address uniswapRouter_,\n    address nonfungiblePositionManager_,\n    address liquidityExtension_,\n    uint160 sqrtPriceX96\n  ) external onlyOwner {\n    require(!initialized, \"CIL: already initialized\");\n\n    _mint(preSale_, 50_000 * 1e18);\n    _mint(ogAirdrop_, 30_000 * 1e18);\n    _mint(trueOgAirdrop_, 20_000 * 1e18);\n    _mint(multiSig, 4_900_000 * 1e18); // 5,000,000 - 100,000 = 4,900,000\n\n    staking = staking_;\n    nonfungiblePositionManager = nonfungiblePositionManager_;\n    liquidityExtension = liquidityExtension_;\n\n    IPeripheryImmutableState uniswapRouter = IPeripheryImmutableState(uniswapRouter_);\n    IUniswapV3Factory uniswapFactory = IUniswapV3Factory(uniswapRouter.factory());\n\n    uint24 poolFee = 3000;\n    pool = uniswapFactory.createPool(address(this), uniswapRouter.WETH9(), poolFee);\n    IUniswapV3Pool(pool).initialize(sqrtPriceX96);\n\n    initialized = true;\n\n    emit Initialized(pool);\n  }\n\n  /**\n   * @dev update staking contract address\n   * @param staking_ address of staking contract\n   */\n  function updateStaking(address staking_) external onlyOwner {\n    require(staking_ != address(0), \"CILPreSale: invalid staking address\");\n    staking = staking_;\n  }\n\n  /**\n   * @dev update liquidityExtension contract address\n   * @param liquidityExtension_ address of liquidityExtension contract\n   */\n  function updateLiquidityExtension(address liquidityExtension_) external onlyOwner {\n    require(liquidityExtension_ != address(0), \"CILPreSale: invalid liquidityExtension address\");\n    liquidityExtension = liquidityExtension_;\n  }\n\n  /// @dev setup hook for fee 1% (70% to staking contract, 30% to multiSig wallet)\n  function _transfer(address from, address to, uint256 amount) internal virtual override {\n    if (\n      from == liquidityExtension ||\n      to == liquidityExtension ||\n      from == nonfungiblePositionManager ||\n      to == nonfungiblePositionManager ||\n      (from != pool && to != pool)\n    ) {\n      super._transfer(from, to, amount);\n      return;\n    }\n\n    uint256 totalFee = amount / 100; // 1% of swap amount\n    uint256 toStaking = (totalFee * 7) / 10; // send 70% to staking contract\n\n    super._transfer(from, staking, toStaking);\n    super._transfer(from, multiSig, totalFee - toStaking);\n    super._transfer(from, to, amount - totalFee);\n  }\n\n  function getPrice() external view returns (uint256 price) {\n    (uint160 sqrtPriceX96, , , , , , ) = IUniswapV3Pool(pool).slot0();\n    return ((uint(sqrtPriceX96) * uint(sqrtPriceX96)) * 1e18) >> (96 * 2);\n  }\n}\n"
    },
    "contracts/core/CILStaking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ICILStaking} from \"./interfaces/ICILStaking.sol\";\n\n/// @notice cilistia staking contract\ncontract CILStaking is ICILStaking {\n  /// @notice multi sign wallet address of team\n  address public immutable multiSig;\n  /// @notice cil token address\n  address public immutable cil;\n  /// @notice p2p marketplace contract address\n  address public immutable marketplace;\n\n  struct Stake {\n    uint256 tokenAmount; // amount of tokens locked in a stake\n    uint256 lockedAmount; // amount of tokens locked in a stake\n    uint256 stakedTime; // start time of locking\n  }\n\n  /// @notice active stakes for each user\n  mapping(address => Stake) public stakes;\n\n  /// @notice total staked token amount\n  uint256 public totalStakedAmount;\n  uint256 public totalNegativePoint;\n\n  /// @notice lock time - immutable 1 weeks\n  uint256 public immutable lockTime = 1 weeks;\n\n  /**\n   * @param cil_ cil token address\n   * @param marketplace_ marketplace address\n   * @param multiSig_ multi sign wallet address\n   */\n  constructor(address cil_, address marketplace_, address multiSig_) {\n    cil = cil_;\n    marketplace = marketplace_;\n    multiSig = multiSig_;\n  }\n\n  /**\n   * @dev stake token with amount\n   * @param amount token amount to stake\n   */\n  function stake(uint256 amount) external {\n    Stake memory newStake = stakes[msg.sender];\n    newStake.tokenAmount += _collectedTokenAmount(msg.sender);\n\n    newStake.tokenAmount += amount;\n    totalStakedAmount += (newStake.tokenAmount - stakes[msg.sender].tokenAmount);\n    uint256 negativePoint = totalNegativePoint + (newStake.tokenAmount * block.timestamp);\n    totalNegativePoint =\n      negativePoint -\n      (stakes[msg.sender].tokenAmount * stakes[msg.sender].stakedTime);\n    newStake.stakedTime = block.timestamp;\n\n    stakes[msg.sender] = newStake;\n\n    IERC20(cil).transferFrom(msg.sender, address(this), amount);\n\n    emit StakeUpdated(msg.sender, newStake.tokenAmount, newStake.lockedAmount);\n  }\n\n  /**\n   * @dev unstake staked token\n   * @param amount token amount to unstake\n   */\n  function unStake(uint256 amount) external {\n    uint256 rewardAmount = _collectedTokenAmount(msg.sender);\n\n    Stake memory newStake = stakes[msg.sender];\n    uint256 newTotalStakedAmount = totalStakedAmount;\n\n    uint256 withdrawAmount = amount;\n\n    if (newStake.tokenAmount + rewardAmount < newStake.lockedAmount + amount) {\n      withdrawAmount = newStake.tokenAmount + rewardAmount - newStake.lockedAmount;\n    }\n\n    newStake.tokenAmount += rewardAmount;\n    newStake.tokenAmount -= withdrawAmount;\n\n    newTotalStakedAmount += rewardAmount;\n    newTotalStakedAmount -= withdrawAmount;\n\n    uint256 negativePoint = totalNegativePoint + (newStake.tokenAmount * block.timestamp);\n    totalNegativePoint =\n      negativePoint -\n      (stakes[msg.sender].tokenAmount * stakes[msg.sender].stakedTime);\n\n    stakes[msg.sender] = newStake;\n    totalStakedAmount = newTotalStakedAmount;\n\n    IERC20(cil).transfer(msg.sender, withdrawAmount);\n\n    emit StakeUpdated(msg.sender, newStake.tokenAmount, newStake.lockedAmount);\n    emit UnStaked(msg.sender, withdrawAmount);\n  }\n\n  /**\n   * @dev return colleted token amount\n   * @return collectedAmount total collected token amount\n   */\n  function collectedToken(address user) external view returns (uint256 collectedAmount) {\n    collectedAmount = _collectedTokenAmount(user);\n  }\n\n  /**\n   * @dev return colleted token amount\n   * @param user user address\n   * @return stakingAmount lockable staking token amount\n   */\n  function lockableCil(address user) external view returns (uint256 stakingAmount) {\n    stakingAmount = stakes[user].tokenAmount - stakes[user].lockedAmount;\n  }\n\n  /**\n   * @dev return colleted token amount\n   * @param user user address\n   * @return stakingAmount unlocked staking token amount\n   */\n  function lockedCil(address user) external view returns (uint256 stakingAmount) {\n    stakingAmount = stakes[user].lockedAmount;\n  }\n\n  /**\n   * @dev lock staked token: called from marketplace contract\n   * @param amount token amount to lock\n   */\n  function lock(address user, uint256 amount) external {\n    require(msg.sender == marketplace, \"CILStaking: forbidden\");\n    require(stakes[user].tokenAmount >= amount, \"CILStaking: insufficient staking amount\");\n\n    stakes[user].lockedAmount = amount;\n\n    emit StakeUpdated(user, stakes[user].tokenAmount, amount);\n  }\n\n  /// @dev remove staking data\n  function remove(address user) external {\n    require(msg.sender == marketplace, \"CILStaking: forbidden\");\n\n    Stake memory newStake = stakes[user];\n\n    uint256 reward = _collectedTokenAmount(user) + newStake.stakedTime;\n\n    newStake.stakedTime = block.timestamp;\n    newStake.tokenAmount = 0;\n    newStake.lockedAmount = 0;\n\n    stakes[user] = newStake;\n\n    IERC20(cil).transfer(multiSig, reward);\n\n    emit StakeUpdated(user, 0, 0);\n  }\n\n  /// @dev return total releasable token amount of staking contract\n  function _totalReleasable() private view returns (uint256) {\n    return IERC20(cil).balanceOf(address(this)) - totalStakedAmount;\n  }\n\n  /// @dev return total stake point of staking contract stake point = amount * period\n  function _totalStakePoint() private view returns (uint256 totalStakePoint) {\n    totalStakePoint = totalStakedAmount * block.timestamp - totalNegativePoint;\n  }\n\n  /// @dev get collected token amount\n  function _collectedTokenAmount(address user) private view returns (uint256) {\n    uint256 totalReleasable = _totalReleasable();\n    uint256 totalStakePoint = _totalStakePoint();\n    uint256 stakePoint = stakes[user].tokenAmount * (block.timestamp - stakes[user].stakedTime);\n\n    if (stakePoint == 0) {\n      return 0;\n    }\n\n    return (totalReleasable * stakePoint) / totalStakePoint;\n  }\n}\n"
    },
    "contracts/core/interfaces/ICIL.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\n/// @notice cilistia token contract interface\ninterface ICIL {\n  /// @dev return cil token price base on eth price\n  function getPrice() external view returns (uint256 price);\n}\n"
    },
    "contracts/core/interfaces/ICILStaking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\n/// @notice cilistia staking contract interface\ninterface ICILStaking {\n  /// @notice fires when stake state changes\n  event StakeUpdated(address user, uint256 stakedAmount, uint256 lockedAmount);\n\n  /// @notice fires when unstake token\n  event UnStaked(address user, uint256 rewardAmount);\n\n  /// @dev unstake staked token\n  function lock(address user, uint256 amount) external;\n\n  /// @dev remove staking data\n  function remove(address user) external;\n\n  /// @dev return colleted token amount\n  function collectedToken(address user) external view returns (uint256);\n\n  /// @dev return lockable token amount\n  function lockableCil(address user) external view returns (uint256);\n\n  /// @dev return locked token amount\n  function lockedCil(address user) external view returns (uint256);\n}\n"
    },
    "contracts/core/MarketPlace.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {IUniswapV3Pool} from \"../uniswap-contracts/interfaces/IUniswapV3Pool.sol\";\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {ReentrancyGuard} from \"../utils/ReentrancyGuard.sol\";\nimport {ICILStaking} from \"./interfaces/ICILStaking.sol\";\nimport {ICIL} from \"./interfaces/ICIL.sol\";\n\n/**\n * @title Cilistia P2P MarketPlace\n * @notice cilistia MarketPlace contract\n * price decimals 8\n * percent decimals 2\n */\ncontract MarketPlace is Ownable, ReentrancyGuard {\n  using SafeERC20 for IERC20;\n\n  struct PositionCreateParam {\n    uint128 price;\n    uint128 amount;\n    uint128 minAmount;\n    uint128 maxAmount;\n    bool priceType; // 0 => fixed, 1 => percent\n    uint8 paymentMethod; // 0 => BankTransfer, 1 => Other\n    address token;\n  }\n\n  struct Position {\n    uint128 price;\n    uint128 amount;\n    uint128 minAmount;\n    uint128 maxAmount;\n    uint128 offeredAmount;\n    bool priceType; // 0 => fixed, 1 => percent\n    uint8 paymentMethod; // 0 => BankTransfer, 1 => Other\n    address token;\n    address creator;\n  }\n\n  struct Offer {\n    bytes32 positionKey;\n    uint128 amount;\n    address creator;\n    bool released;\n    bool canceled;\n  }\n\n  /// @notice multi sign wallet address of team\n  address public immutable multiSig;\n\n  /// @notice cil address\n  address public immutable cil;\n  /// @notice uniswap router address\n  address public cilPair;\n  /// @notice cil staking address\n  address public cilStaking;\n  /// @notice chainlink pricefeeds (address => address)\n  mapping(address => address) public pricefeeds;\n\n  /// @notice positions (bytes32 => Position)\n  mapping(bytes32 => Position) public positions;\n  /// @notice offers (bytes32 => Offer)\n  mapping(bytes32 => Offer) public offers;\n  /// @notice fee decimals 2\n  uint256 public feePoint = 100;\n\n  /// @notice blocked address\n  mapping(address => bool) public isBlocked;\n\n  /// @notice fires when create position\n  event PositionCreated(\n    bytes32 key,\n    uint128 price,\n    uint128 amount,\n    uint128 minAmount,\n    uint128 maxAmount,\n    bool priceType,\n    uint8 paymentMethod,\n    address indexed token,\n    address indexed creator,\n    string terms\n  );\n\n  /// @notice fires when update position\n  event PositionUpdated(bytes32 indexed key, uint128 amount, uint128 offeredAmount);\n\n  /// @notice fires when position state change\n  event OfferCreated(\n    bytes32 offerKey,\n    bytes32 indexed positionKey,\n    address indexed creator,\n    uint128 amount,\n    string terms\n  );\n\n  /// @notice fires when cancel offer\n  event OfferCanceled(bytes32 indexed key);\n\n  /// @notice fires when release offer\n  event OfferReleased(bytes32 indexed key);\n\n  /// @notice fires when block account\n  event AccountBlocked(address account);\n\n  /**\n   * @param cil_ cilistia token address\n   * @param multiSig_ multi sign wallet address\n   */\n  constructor(address cil_, address multiSig_) {\n    cil = cil_;\n    multiSig = multiSig_;\n  }\n\n  modifier initialized() {\n    require(cilStaking != address(0), \"MarketPlace: not initialized yet\");\n    _;\n  }\n\n  modifier whitelisted(address token) {\n    if (token != cil) {\n      require(pricefeeds[token] != address(0), \"MarketPlace: token not whitelisted\");\n    }\n    _;\n  }\n\n  modifier noBlocked() {\n    require(!isBlocked[msg.sender], \"MarketPlace: blocked address\");\n    _;\n  }\n\n  modifier validPosition(bytes32 key) {\n    require(positions[key].creator != address(0), \"MarketPlace: not exist such position\");\n    _;\n  }\n\n  /// @dev calcualate key of position\n  function getPositionKey(\n    uint8 paymentMethod,\n    uint128 price,\n    address token,\n    address creator,\n    uint256 amount,\n    uint128 minAmount,\n    uint128 maxAmount,\n    uint256 timestamp\n  ) public pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encodePacked(\n          paymentMethod,\n          price,\n          token,\n          amount,\n          minAmount,\n          maxAmount,\n          creator,\n          timestamp\n        )\n      );\n  }\n\n  /// @dev calcualate key of position\n  function getOfferKey(\n    bytes32 positionKey,\n    uint256 amount,\n    address creator,\n    uint256 timestamp\n  ) public pure returns (bytes32) {\n    return keccak256(abi.encodePacked(positionKey, amount, creator, timestamp));\n  }\n\n  /**\n   * @dev get token price\n   * @param token address of token\n   * @return price price of token\n   */\n  function getTokenPrice(address token) public view returns (uint256) {\n    if (token == cil) {\n      return getCilPrice();\n    }\n\n    require(pricefeeds[token] != address(0), \"MarketPlace: token not whitelisted\");\n\n    (, int256 answer, , , ) = AggregatorV3Interface(pricefeeds[token]).latestRoundData();\n\n    return uint256(answer);\n  }\n\n  /**\n   * @dev get cil token price from uniswap\n   * @return price price of cil token\n   */\n  function getCilPrice() public view returns (uint256) {\n    bool isFirst = IUniswapV3Pool(cilPair).token0() == cil;\n    uint256 priceWithEth = ICIL(cil).getPrice();\n\n    uint256 ethPrice = getTokenPrice(address(0));\n    uint256 price = isFirst\n      ? ((ethPrice * priceWithEth) / 10 ** 18)\n      : ((ethPrice * 10 ** 18) / priceWithEth);\n\n    return price;\n  }\n\n  /**\n   * @dev get staking amount with eth\n   * @param user wallet address\n   * @return totalAmount amount of staked cil with usd\n   */\n  function getStakedCil(address user) public view returns (uint256 totalAmount) {\n    uint256 cilPrice = getCilPrice();\n    totalAmount = (ICILStaking(cilStaking).lockableCil(user) * cilPrice) / 1e18;\n  }\n\n  /**\n   * @dev create position\n   * @param params position create params\n   * @param terms terms of position\n   */\n  function createPosition(\n    PositionCreateParam memory params,\n    string memory terms\n  ) external payable initialized whitelisted(params.token) noBlocked nonReentrant {\n    bytes32 key = getPositionKey(\n      params.paymentMethod,\n      params.price,\n      params.token,\n      msg.sender,\n      params.amount,\n      params.minAmount,\n      params.maxAmount,\n      block.timestamp\n    );\n\n    positions[key] = Position(\n      params.price,\n      params.amount,\n      params.minAmount,\n      params.maxAmount,\n      0,\n      params.priceType,\n      params.paymentMethod,\n      params.token,\n      msg.sender\n    );\n\n    if (params.token == address(0)) {\n      require(params.amount == msg.value, \"MarketPlace: invalid eth amount\");\n    } else {\n      IERC20(params.token).transferFrom(msg.sender, address(this), params.amount);\n    }\n\n    emit PositionCreated(\n      key,\n      params.price,\n      params.amount,\n      params.minAmount,\n      params.maxAmount,\n      params.priceType,\n      params.paymentMethod,\n      params.token,\n      msg.sender,\n      terms\n    );\n  }\n\n  /**\n   * @dev increase position amount\n   * @param key key of position\n   * @param amount amount to increase\n   */\n  function increasePosition(\n    bytes32 key,\n    uint128 amount\n  ) external payable initialized noBlocked validPosition(key) nonReentrant {\n    require(positions[key].creator == msg.sender, \"MarketPlace: not owner of this position\");\n\n    positions[key].amount += amount;\n\n    if (positions[key].token == address(0)) {\n      require(amount == msg.value, \"MarketPlace: invalid eth amount\");\n    } else {\n      IERC20(positions[key].token).transferFrom(msg.sender, address(this), amount);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n  }\n\n  /**\n   * @dev decrease position amount\n   * @param key key of position\n   * @param amount amount to increase\n   */\n  function decreasePosition(\n    bytes32 key,\n    uint128 amount\n  ) external initialized noBlocked validPosition(key) nonReentrant {\n    require(positions[key].creator == msg.sender, \"MarketPlace: not owner of this position\");\n    require(\n      positions[key].amount >= positions[key].offeredAmount + amount,\n      \"MarketPlace: insufficient amount\"\n    );\n\n    positions[key].amount -= amount;\n\n    if (positions[key].token == address(0)) {\n      payable(msg.sender).transfer(amount);\n    } else {\n      IERC20(positions[key].token).transfer(msg.sender, amount);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n  }\n\n  /**\n   * @dev create offer\n   * @param positionKey key of position\n   * @param amount amount to offer\n   * @param terms terms of position\n   */\n  function createOffer(\n    bytes32 positionKey,\n    uint128 amount,\n    string memory terms\n  ) external initialized noBlocked nonReentrant {\n    require(positions[positionKey].creator != address(0), \"MarketPlace: such position don't exist\");\n\n    require(positions[positionKey].minAmount <= amount, \"MarketPlace: amount less than min\");\n    require(positions[positionKey].maxAmount >= amount, \"MarketPlace: amount exceed max\");\n\n    uint256 lockableCil = getStakedCil(positions[positionKey].creator);\n    require(lockableCil > amount, \"MarketPlace: insufficient staking amount for offer\");\n\n    uint256 decimals = 18;\n    uint256 price = positions[positionKey].price;\n\n    if (positions[positionKey].token != address(0)) {\n      decimals = IERC20Metadata(positions[positionKey].token).decimals();\n    }\n\n    if (positions[positionKey].priceType) {\n      if (positions[positionKey].token == cil) {\n        price = (getCilPrice() * positions[positionKey].price) / 10000;\n      } else {\n        price =\n          (getTokenPrice(positions[positionKey].token) * positions[positionKey].price) /\n          10000;\n      }\n    }\n\n    uint256 tokenAmount = (amount * 10 ** decimals) / price;\n    uint256 cilAmount = (amount * 1e18) / getCilPrice();\n\n    ICILStaking(cilStaking).lock(\n      positions[positionKey].creator,\n      ICILStaking(cilStaking).lockedCil(positions[positionKey].creator) + cilAmount\n    );\n\n    bytes32 key = getOfferKey(positionKey, amount, msg.sender, block.timestamp);\n\n    positions[positionKey].offeredAmount += uint128(tokenAmount);\n    offers[key] = Offer(positionKey, uint128(tokenAmount), msg.sender, false, false);\n\n    emit OfferCreated(key, positionKey, msg.sender, amount, terms);\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n  }\n\n  /**\n   * @dev cancel offer\n   * @param key key of offer\n   */\n  function cancelOffer(bytes32 key) external noBlocked nonReentrant {\n    require(offers[key].creator == msg.sender, \"MarketPlace: you aren't creator of this offer\");\n    require(!offers[key].released && !offers[key].canceled, \"MarketPlace: offer already finished\");\n\n    offers[key].canceled = true;\n    positions[offers[key].positionKey].offeredAmount -= offers[key].amount;\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n    emit OfferCanceled(key);\n  }\n\n  /**\n   * @dev release offer\n   * @param key key of offer\n   */\n  function releaseOffer(bytes32 key) external noBlocked {\n    bytes32 positionKey = offers[key].positionKey;\n    require(\n      positions[positionKey].creator == msg.sender,\n      \"MarketPlace: you aren't creator of this position\"\n    );\n    require(!offers[key].released && !offers[key].canceled, \"MarketPlace: offer already finished\");\n\n    offers[key].released = true;\n    positions[positionKey].amount -= offers[key].amount;\n    positions[positionKey].offeredAmount -= offers[key].amount;\n\n    uint256 fee = (offers[key].amount * feePoint) / 10000;\n    if (positions[positionKey].token == address(0)) {\n      payable(offers[key].creator).transfer(offers[key].amount - fee);\n      payable(multiSig).transfer(fee);\n    } else {\n      IERC20(positions[positionKey].token).transfer(offers[key].creator, offers[key].amount - fee);\n      IERC20(positions[positionKey].token).transfer(multiSig, fee);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n    emit OfferReleased(key);\n  }\n\n  /**\n   * @dev set staking contract address\n   * @param cilStaking_ staking contract address\n   * @param cilPair_ address of cil/eth pair\n   * @param ethPricefeed_ weth pricefeed contract address\n   */\n  function init(address cilStaking_, address cilPair_, address ethPricefeed_) external onlyOwner {\n    cilStaking = cilStaking_;\n    cilPair = cilPair_;\n\n    bool isFirst = IUniswapV3Pool(cilPair).token0() == cil;\n    pricefeeds[address(0)] = ethPricefeed_;\n    pricefeeds[\n      isFirst ? IUniswapV3Pool(cilPair).token1() : IUniswapV3Pool(cilPair).token0()\n    ] = ethPricefeed_;\n  }\n\n  /**\n   * @dev set token price feed\n   * @param token address of token\n   * @param pricefeed address of chainlink aggregator\n   */\n  function setPriceFeed(address token, address pricefeed) external onlyOwner {\n    pricefeeds[token] = pricefeed;\n  }\n\n  /**\n   * @dev force cancel offer\n   * @param key key of offer\n   */\n  function forceCancelOffer(bytes32 key) external onlyOwner {\n    require(!offers[key].released && !offers[key].canceled, \"MarketPlace: offer already finished\");\n\n    offers[key].canceled = true;\n    positions[offers[key].positionKey].offeredAmount -= offers[key].amount;\n\n    emit OfferCanceled(key);\n  }\n\n  /**\n   * @dev force remove position\n   * @param key key of position\n   */\n  function forceRemovePosition(bytes32 key) external onlyOwner {\n    uint256 positionAmount = positions[key].amount;\n    isBlocked[positions[key].creator] = true;\n    positions[key].amount = 0;\n    ICILStaking(cilStaking).remove(positions[key].creator);\n\n    if (positions[key].token == address(0)) {\n      payable(multiSig).transfer(positionAmount);\n    } else {\n      IERC20(positions[key].token).transfer(multiSig, positionAmount);\n    }\n\n    emit PositionUpdated(key, positions[key].amount, positions[key].offeredAmount);\n    emit AccountBlocked(positions[key].creator);\n  }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.9;\n\nimport {ERC20Permit, ERC20} from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract MockERC20 is ERC20Permit {\n  uint8 private immutable _decimals;\n\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    uint8 decimals_\n  ) ERC20Permit(name_) ERC20(name_, symbol_) {\n    _decimals = decimals_;\n  }\n\n  function mint(address to, uint256 amount) external {\n    _mint(to, amount);\n  }\n\n  function burn(address account, uint256 amount) external {\n    _burn(account, amount);\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/BlockTimestamp.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Function for getting block timestamp\n/// @dev Base contract that is overridden for tests\nabstract contract BlockTimestamp {\n  /// @dev Method that exists purely to be overridden for tests\n  /// @return The current block timestamp\n  function _blockTimestamp() internal view virtual returns (uint256) {\n    return block.timestamp;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/ERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../libraries/ChainId.sol\";\nimport \"../interfaces/external/IERC1271.sol\";\nimport \"../interfaces/IERC721Permit.sol\";\nimport \"./BlockTimestamp.sol\";\n\n/// @title ERC721 with permit\n/// @notice Nonfungible tokens that support an approve via signature, i.e. permit\nabstract contract ERC721Permit is BlockTimestamp, ERC721, IERC721Permit {\n  /// @dev Gets the current nonce for a token ID and then increments it, returning the original value\n  function _getAndIncrementNonce(uint256 tokenId) internal virtual returns (uint256);\n\n  /// @dev The hash of the name used in the permit signature verification\n  bytes32 private immutable nameHash;\n\n  /// @dev The hash of the version string used in the permit signature verification\n  bytes32 private immutable versionHash;\n\n  /// @notice Computes the nameHash and versionHash\n  constructor(\n    string memory name_,\n    string memory symbol_,\n    string memory version_\n  ) ERC721(name_, symbol_) {\n    nameHash = keccak256(bytes(name_));\n    versionHash = keccak256(bytes(version_));\n  }\n\n  /// @inheritdoc IERC721Permit\n  function DOMAIN_SEPARATOR() public view override returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(\n          // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\n          0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\n          nameHash,\n          versionHash,\n          ChainId.get(),\n          address(this)\n        )\n      );\n  }\n\n  /// @inheritdoc IERC721Permit\n  /// @dev Value is equal to keccak256(\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\");\n  bytes32 public constant override PERMIT_TYPEHASH =\n    0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\n\n  /// @inheritdoc IERC721Permit\n  function permit(\n    address spender,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable override {\n    require(_blockTimestamp() <= deadline, \"Permit expired\");\n\n    bytes32 digest = keccak256(\n      abi.encodePacked(\n        \"\\x19\\x01\",\n        DOMAIN_SEPARATOR(),\n        keccak256(\n          abi.encode(PERMIT_TYPEHASH, spender, tokenId, _getAndIncrementNonce(tokenId), deadline)\n        )\n      )\n    );\n    address owner = ownerOf(tokenId);\n    require(spender != owner, \"ERC721Permit: approval to current owner\");\n\n    if (Address.isContract(owner)) {\n      require(\n        IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\n        \"Unauthorized\"\n      );\n    } else {\n      address recoveredAddress = ecrecover(digest, v, r, s);\n      require(recoveredAddress != address(0), \"Invalid signature\");\n      require(recoveredAddress == owner, \"Unauthorized\");\n    }\n\n    _approve(spender, tokenId);\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/LiquidityManagement.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\nimport \"../interfaces/IUniswapV3Factory.sol\";\nimport \"../interfaces/callback/IUniswapV3MintCallback.sol\";\nimport \"../libraries/TickMath.sol\";\n\nimport \"../libraries/PoolAddress.sol\";\nimport \"../libraries/CallbackValidation.sol\";\nimport \"../libraries/LiquidityAmounts.sol\";\n\nimport \"./PeripheryPayments.sol\";\nimport \"./PeripheryImmutableState.sol\";\n\n/// @title Liquidity management functions\n/// @notice Internal functions for safely managing liquidity in Uniswap V3\nabstract contract LiquidityManagement is\n  IUniswapV3MintCallback,\n  PeripheryImmutableState,\n  PeripheryPayments\n{\n  struct MintCallbackData {\n    PoolAddress.PoolKey poolKey;\n    address payer;\n  }\n\n  /// @inheritdoc IUniswapV3MintCallback\n  function uniswapV3MintCallback(\n    uint256 amount0Owed,\n    uint256 amount1Owed,\n    bytes calldata data\n  ) external override {\n    MintCallbackData memory decoded = abi.decode(data, (MintCallbackData));\n    CallbackValidation.verifyCallback(factory, decoded.poolKey);\n\n    if (amount0Owed > 0) pay(decoded.poolKey.token0, decoded.payer, msg.sender, amount0Owed);\n    if (amount1Owed > 0) pay(decoded.poolKey.token1, decoded.payer, msg.sender, amount1Owed);\n  }\n\n  struct AddLiquidityParams {\n    address token0;\n    address token1;\n    uint24 fee;\n    address recipient;\n    int24 tickLower;\n    int24 tickUpper;\n    uint256 amount0Desired;\n    uint256 amount1Desired;\n    uint256 amount0Min;\n    uint256 amount1Min;\n  }\n\n  /// @notice Add liquidity to an initialized pool\n  function addLiquidity(\n    AddLiquidityParams memory params\n  ) internal returns (uint128 liquidity, uint256 amount0, uint256 amount1, IUniswapV3Pool pool) {\n    PoolAddress.PoolKey memory poolKey = PoolAddress.PoolKey({\n      token0: params.token0,\n      token1: params.token1,\n      fee: params.fee\n    });\n\n    pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n\n    // compute the liquidity amount\n    {\n      (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n      uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(params.tickLower);\n      uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(params.tickUpper);\n\n      liquidity = LiquidityAmounts.getLiquidityForAmounts(\n        sqrtPriceX96,\n        sqrtRatioAX96,\n        sqrtRatioBX96,\n        params.amount0Desired,\n        params.amount1Desired\n      );\n    }\n\n    (amount0, amount1) = pool.mint(\n      params.recipient,\n      params.tickLower,\n      params.tickUpper,\n      liquidity,\n      abi.encode(MintCallbackData({poolKey: poolKey, payer: msg.sender}))\n    );\n\n    require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, \"Price slippage check\");\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/Multicall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\nimport \"../interfaces/IMulticall.sol\";\n\n/// @title Multicall\n/// @notice Enables calling multiple methods in a single call to the contract\nabstract contract Multicall is IMulticall {\n  /// @inheritdoc IMulticall\n  function multicall(\n    bytes[] calldata data\n  ) public payable override returns (bytes[] memory results) {\n    results = new bytes[](data.length);\n    for (uint256 i = 0; i < data.length; i++) {\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\n\n      if (!success) {\n        // Next 5 lines from https://ethereum.stackexchange.com/a/83577\n        if (result.length < 68) revert();\n        assembly {\n          result := add(result, 0x04)\n        }\n        revert(abi.decode(result, (string)));\n      }\n\n      results[i] = result;\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/PeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IPeripheryImmutableState.sol\";\n\n/// @title Immutable state\n/// @notice Immutable state used by periphery contracts\nabstract contract PeripheryImmutableState is IPeripheryImmutableState {\n  /// @inheritdoc IPeripheryImmutableState\n  address public immutable override factory;\n  /// @inheritdoc IPeripheryImmutableState\n  address public immutable override WETH9;\n\n  constructor(address _factory, address _WETH9) {\n    factory = _factory;\n    WETH9 = _WETH9;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/PeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IPeripheryPayments.sol\";\nimport \"../interfaces/external/IWETH9.sol\";\n\nimport \"../libraries/TransferHelper.sol\";\n\nimport \"./PeripheryImmutableState.sol\";\n\nabstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\n  receive() external payable {\n    require(msg.sender == WETH9, \"Not WETH9\");\n  }\n\n  /// @inheritdoc IPeripheryPayments\n  function unwrapWETH9(uint256 amountMinimum, address recipient) public payable override {\n    uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n    require(balanceWETH9 >= amountMinimum, \"Insufficient WETH9\");\n\n    if (balanceWETH9 > 0) {\n      IWETH9(WETH9).withdraw(balanceWETH9);\n      TransferHelper.safeTransferETH(recipient, balanceWETH9);\n    }\n  }\n\n  /// @inheritdoc IPeripheryPayments\n  function sweepToken(\n    address token,\n    uint256 amountMinimum,\n    address recipient\n  ) public payable override {\n    uint256 balanceToken = IERC20(token).balanceOf(address(this));\n    require(balanceToken >= amountMinimum, \"Insufficient token\");\n\n    if (balanceToken > 0) {\n      TransferHelper.safeTransfer(token, recipient, balanceToken);\n    }\n  }\n\n  /// @inheritdoc IPeripheryPayments\n  function refundETH() external payable override {\n    if (address(this).balance > 0)\n      TransferHelper.safeTransferETH(msg.sender, address(this).balance);\n  }\n\n  /// @param token The token to pay\n  /// @param payer The entity that must pay\n  /// @param recipient The entity that will receive payment\n  /// @param value The amount to pay\n  function pay(address token, address payer, address recipient, uint256 value) internal {\n    if (token == WETH9 && address(this).balance >= value) {\n      // pay with WETH9\n      IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\n      IWETH9(WETH9).transfer(recipient, value);\n    } else if (payer == address(this)) {\n      // pay with tokens already in the contract (for the exact input multihop case)\n      TransferHelper.safeTransfer(token, recipient, value);\n    } else {\n      // pull payment\n      TransferHelper.safeTransferFrom(token, payer, recipient, value);\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/PeripheryPaymentsWithFee.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../libraries/LowGasSafeMath.sol\";\n\nimport \"./PeripheryPayments.sol\";\nimport \"../interfaces/IPeripheryPaymentsWithFee.sol\";\n\nimport \"../interfaces/external/IWETH9.sol\";\nimport \"../libraries/TransferHelper.sol\";\n\nabstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\n  using LowGasSafeMath for uint256;\n\n  /// @inheritdoc IPeripheryPaymentsWithFee\n  function unwrapWETH9WithFee(\n    uint256 amountMinimum,\n    address recipient,\n    uint256 feeBips,\n    address feeRecipient\n  ) public payable override {\n    require(feeBips > 0 && feeBips <= 100);\n\n    uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\n    require(balanceWETH9 >= amountMinimum, \"Insufficient WETH9\");\n\n    if (balanceWETH9 > 0) {\n      IWETH9(WETH9).withdraw(balanceWETH9);\n      uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;\n      if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\n      TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\n    }\n  }\n\n  /// @inheritdoc IPeripheryPaymentsWithFee\n  function sweepTokenWithFee(\n    address token,\n    uint256 amountMinimum,\n    address recipient,\n    uint256 feeBips,\n    address feeRecipient\n  ) public payable override {\n    require(feeBips > 0 && feeBips <= 100);\n\n    uint256 balanceToken = IERC20(token).balanceOf(address(this));\n    require(balanceToken >= amountMinimum, \"Insufficient token\");\n\n    if (balanceToken > 0) {\n      uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;\n      if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\n      TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/PeripheryValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"./BlockTimestamp.sol\";\n\nabstract contract PeripheryValidation is BlockTimestamp {\n  modifier checkDeadline(uint256 deadline) {\n    require(_blockTimestamp() <= deadline, \"Transaction too old\");\n    _;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/PoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IUniswapV3Factory.sol\";\nimport \"../interfaces/IUniswapV3Pool.sol\";\n\nimport \"./PeripheryImmutableState.sol\";\nimport \"../interfaces/IPoolInitializer.sol\";\n\n/// @title Creates and initializes V3 Pools\nabstract contract PoolInitializer is IPoolInitializer, PeripheryImmutableState {\n  /// @inheritdoc IPoolInitializer\n  function createAndInitializePoolIfNecessary(\n    address token0,\n    address token1,\n    uint24 fee,\n    uint160 sqrtPriceX96\n  ) external payable override returns (address pool) {\n    require(token0 < token1);\n    pool = IUniswapV3Factory(factory).getPool(token0, token1, fee);\n\n    if (pool == address(0)) {\n      pool = IUniswapV3Factory(factory).createPool(token0, token1, fee);\n      IUniswapV3Pool(pool).initialize(sqrtPriceX96);\n    } else {\n      (uint160 sqrtPriceX96Existing, , , , , , ) = IUniswapV3Pool(pool).slot0();\n      if (sqrtPriceX96Existing == 0) {\n        IUniswapV3Pool(pool).initialize(sqrtPriceX96);\n      }\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/base/SelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\nimport \"../interfaces/ISelfPermit.sol\";\nimport \"../interfaces/external/IERC20PermitAllowed.sol\";\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\n/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\n/// that requires an approval in a single transaction.\nabstract contract SelfPermit is ISelfPermit {\n  /// @inheritdoc ISelfPermit\n  function selfPermit(\n    address token,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public payable override {\n    IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\n  }\n\n  /// @inheritdoc ISelfPermit\n  function selfPermitIfNecessary(\n    address token,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable override {\n    if (IERC20(token).allowance(msg.sender, address(this)) < value)\n      selfPermit(token, value, deadline, v, r, s);\n  }\n\n  /// @inheritdoc ISelfPermit\n  function selfPermitAllowed(\n    address token,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public payable override {\n    IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\n  }\n\n  /// @inheritdoc ISelfPermit\n  function selfPermitAllowedIfNecessary(\n    address token,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable override {\n    if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\n      selfPermitAllowed(token, nonce, expiry, v, r, s);\n  }\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/callback/IUniswapV3FlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Callback for IUniswapV3PoolActions#flash\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\ninterface IUniswapV3FlashCallback {\n  /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\n  /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n  /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\n  /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\n  function uniswapV3FlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n  function uniswapV3MintCallback(\n    uint256 amount0Owed,\n    uint256 amount1Owed,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n  /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\n  /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n  /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n  function uniswapV3SwapCallback(\n    int256 amount0Delta,\n    int256 amount1Delta,\n    bytes calldata data\n  ) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/external/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Interface for verifying contract-based account signatures\n/// @notice Interface that verifies provided signature for the data\n/// @dev Interface defined by EIP-1271\ninterface IERC1271 {\n  /// @notice Returns whether the provided signature is valid for the provided data\n  /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\n  /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\n  /// MUST allow external calls.\n  /// @param hash Hash of the data to be signed\n  /// @param signature Signature byte array associated with _data\n  /// @return magicValue The bytes4 magic value 0x1626ba7e\n  function isValidSignature(\n    bytes32 hash,\n    bytes memory signature\n  ) external view returns (bytes4 magicValue);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/external/IERC20PermitAllowed.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Interface for permit\n/// @notice Interface used by DAI/CHAI for permit\ninterface IERC20PermitAllowed {\n  /// @notice Approve the spender to spend some tokens via the holder signature\n  /// @dev This is the permit interface used by DAI and CHAI\n  /// @param holder The address of the token holder, the token owner\n  /// @param spender The address of the token spender\n  /// @param nonce The holder's nonce, increases at each call to permit\n  /// @param expiry The timestamp at which the permit is no longer valid\n  /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function permit(\n    address holder,\n    address spender,\n    uint256 nonce,\n    uint256 expiry,\n    bool allowed,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/external/IWETH9.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Interface for WETH9\ninterface IWETH9 is IERC20 {\n  /// @notice Deposit ether to get wrapped ether\n  function deposit() external payable;\n\n  /// @notice Withdraw wrapped ether to get ether\n  function withdraw(uint256) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n  /// @notice Returns the balance of a token\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n  /// @return The number of tokens held by the account\n  function balanceOf(address account) external view returns (uint256);\n\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n  /// @param recipient The account that will receive the amount transferred\n  /// @param amount The number of tokens to send from the sender to the recipient\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n  function transfer(address recipient, uint256 amount) external returns (bool);\n\n  /// @notice Returns the current allowance given to a spender by an owner\n  /// @param owner The account of the token owner\n  /// @param spender The account of the token spender\n  /// @return The current allowance granted by `owner` to `spender`\n  function allowance(address owner, address spender) external view returns (uint256);\n\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n  /// @param amount The amount of tokens allowed to be used by `spender`\n  /// @return Returns true for a successful approval, false for unsuccessful\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n  /// @param sender The account from which the transfer will be initiated\n  /// @param recipient The recipient of the transfer\n  /// @param amount The amount of the transfer\n  /// @return Returns true for a successful transfer, false for unsuccessful\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\n  /// @param value The amount of tokens that were transferred\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n  /// @param owner The account that approved spending of its tokens\n  /// @param spender The account for which the spending allowance was modified\n  /// @param value The new allowance from the owner to the spender\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IERC721Permit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/// @title ERC721 with permit\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\ninterface IERC721Permit is IERC721 {\n  /// @notice The permit typehash used in the permit signature\n  /// @return The typehash for the permit\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n  /// @notice The domain separator used in the permit signature\n  /// @return The domain seperator used in encoding of permit signature\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n  /// @notice Approve of a specific token ID for spending by spender via signature\n  /// @param spender The account that is being approved\n  /// @param tokenId The ID of the token that is being approved for spending\n  /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function permit(\n    address spender,\n    uint256 tokenId,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IMulticall.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\n/// @title Multicall interface\n/// @notice Enables calling multiple methods in a single call to the contract\ninterface IMulticall {\n  /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\n  /// @dev The `msg.value` should not be trusted for any method callable from multicall.\n  /// @param data The encoded function data for each of the calls to make to this contract\n  /// @return results The results from each of the calls passed in via data\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\n\nimport \"./IPoolInitializer.sol\";\nimport \"./IERC721Permit.sol\";\nimport \"./IPeripheryPayments.sol\";\nimport \"./IPeripheryImmutableState.sol\";\nimport \"../libraries/PoolAddress.sol\";\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager is\n  IPoolInitializer,\n  IPeripheryPayments,\n  IPeripheryImmutableState,\n  IERC721Metadata,\n  IERC721Enumerable,\n  IERC721Permit\n{\n  /// @notice Emitted when liquidity is increased for a position NFT\n  /// @dev Also emitted when a token is minted\n  /// @param tokenId The ID of the token for which liquidity was increased\n  /// @param liquidity The amount by which liquidity for the NFT position was increased\n  /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n  /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n  event IncreaseLiquidity(\n    uint256 indexed tokenId,\n    uint128 liquidity,\n    uint256 amount0,\n    uint256 amount1\n  );\n  /// @notice Emitted when liquidity is decreased for a position NFT\n  /// @param tokenId The ID of the token for which liquidity was decreased\n  /// @param liquidity The amount by which liquidity for the NFT position was decreased\n  /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n  /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n  event DecreaseLiquidity(\n    uint256 indexed tokenId,\n    uint128 liquidity,\n    uint256 amount0,\n    uint256 amount1\n  );\n  /// @notice Emitted when tokens are collected for a position NFT\n  /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n  /// @param tokenId The ID of the token for which underlying tokens were collected\n  /// @param recipient The address of the account that received the collected tokens\n  /// @param amount0 The amount of token0 owed to the position that was collected\n  /// @param amount1 The amount of token1 owed to the position that was collected\n  event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n  /// @notice Returns the position information associated with a given token ID.\n  /// @dev Throws if the token ID is not valid.\n  /// @param tokenId The ID of the token that represents the position\n  /// @return nonce The nonce for permits\n  /// @return operator The address that is approved for spending\n  /// @return token0 The address of the token0 for a specific pool\n  /// @return token1 The address of the token1 for a specific pool\n  /// @return fee The fee associated with the pool\n  /// @return tickLower The lower end of the tick range for the position\n  /// @return tickUpper The higher end of the tick range for the position\n  /// @return liquidity The liquidity of the position\n  /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n  /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n  /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n  /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n  function positions(\n    uint256 tokenId\n  )\n    external\n    view\n    returns (\n      uint96 nonce,\n      address operator,\n      address token0,\n      address token1,\n      uint24 fee,\n      int24 tickLower,\n      int24 tickUpper,\n      uint128 liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    );\n\n  struct MintParams {\n    address token0;\n    address token1;\n    uint24 fee;\n    int24 tickLower;\n    int24 tickUpper;\n    uint256 amount0Desired;\n    uint256 amount1Desired;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    address recipient;\n    uint256 deadline;\n  }\n\n  /// @notice Creates a new position wrapped in a NFT\n  /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n  /// a method does not exist, i.e. the pool is assumed to be initialized.\n  /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n  /// @return tokenId The ID of the token that represents the minted position\n  /// @return liquidity The amount of liquidity for this position\n  /// @return amount0 The amount of token0\n  /// @return amount1 The amount of token1\n  function mint(\n    MintParams calldata params\n  ) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n\n  struct IncreaseLiquidityParams {\n    uint256 tokenId;\n    uint256 amount0Desired;\n    uint256 amount1Desired;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    uint256 deadline;\n  }\n\n  /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n  /// @param params tokenId The ID of the token for which liquidity is being increased,\n  /// amount0Desired The desired amount of token0 to be spent,\n  /// amount1Desired The desired amount of token1 to be spent,\n  /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n  /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n  /// deadline The time by which the transaction must be included to effect the change\n  /// @return liquidity The new liquidity amount as a result of the increase\n  /// @return amount0 The amount of token0 to acheive resulting liquidity\n  /// @return amount1 The amount of token1 to acheive resulting liquidity\n  function increaseLiquidity(\n    IncreaseLiquidityParams calldata params\n  ) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\n\n  struct DecreaseLiquidityParams {\n    uint256 tokenId;\n    uint128 liquidity;\n    uint256 amount0Min;\n    uint256 amount1Min;\n    uint256 deadline;\n  }\n\n  /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n  /// @param params tokenId The ID of the token for which liquidity is being decreased,\n  /// amount The amount by which liquidity will be decreased,\n  /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n  /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n  /// deadline The time by which the transaction must be included to effect the change\n  /// @return amount0 The amount of token0 accounted to the position's tokens owed\n  /// @return amount1 The amount of token1 accounted to the position's tokens owed\n  function decreaseLiquidity(\n    DecreaseLiquidityParams calldata params\n  ) external payable returns (uint256 amount0, uint256 amount1);\n\n  struct CollectParams {\n    uint256 tokenId;\n    address recipient;\n    uint128 amount0Max;\n    uint128 amount1Max;\n  }\n\n  /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n  /// @param params tokenId The ID of the NFT for which tokens are being collected,\n  /// recipient The account that should receive the tokens,\n  /// amount0Max The maximum amount of token0 to collect,\n  /// amount1Max The maximum amount of token1 to collect\n  /// @return amount0 The amount of fees collected in token0\n  /// @return amount1 The amount of fees collected in token1\n  function collect(\n    CollectParams calldata params\n  ) external payable returns (uint256 amount0, uint256 amount1);\n\n  /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n  /// must be collected first.\n  /// @param tokenId The ID of the token that is being burned\n  function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/INonfungibleTokenPositionDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"./INonfungiblePositionManager.sol\";\n\n/// @title Describes position NFT tokens via URI\ninterface INonfungibleTokenPositionDescriptor {\n  /// @notice Produces the URI describing a particular token ID for a position manager\n  /// @dev Note this URI may be a data: URI with the JSON contents directly inlined\n  /// @param positionManager The position manager for which to describe the token\n  /// @param tokenId The ID of the token for which to produce a description, which may not be valid\n  /// @return The URI of the ERC721-compliant metadata\n  function tokenURI(\n    INonfungiblePositionManager positionManager,\n    uint256 tokenId\n  ) external view returns (string memory);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IPeripheryImmutableState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Immutable state\n/// @notice Functions that return immutable state of the router\ninterface IPeripheryImmutableState {\n  /// @return Returns the address of the Uniswap V3 factory\n  function factory() external view returns (address);\n\n  /// @return Returns the address of WETH9\n  function WETH9() external view returns (address);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IPeripheryPayments.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPayments {\n  /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n  /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n  /// @param amountMinimum The minimum amount of WETH9 to unwrap\n  /// @param recipient The address receiving ETH\n  function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n\n  /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n  /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n  /// that use ether for the input amount\n  function refundETH() external payable;\n\n  /// @notice Transfers the full amount of a token held by this contract to recipient\n  /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n  /// @param token The contract address of the token which will be transferred to `recipient`\n  /// @param amountMinimum The minimum amount of token required for a transfer\n  /// @param recipient The destination address of the token\n  function sweepToken(address token, uint256 amountMinimum, address recipient) external payable;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IPeripheryPaymentsWithFee.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"./IPeripheryPayments.sol\";\n\n/// @title Periphery Payments\n/// @notice Functions to ease deposits and withdrawals of ETH\ninterface IPeripheryPaymentsWithFee is IPeripheryPayments {\n  /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\n  /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\n  /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n  function unwrapWETH9WithFee(\n    uint256 amountMinimum,\n    address recipient,\n    uint256 feeBips,\n    address feeRecipient\n  ) external payable;\n\n  /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\n  /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\n  /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n  function sweepTokenWithFee(\n    address token,\n    uint256 amountMinimum,\n    address recipient,\n    uint256 feeBips,\n    address feeRecipient\n  ) external payable;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IPoolInitializer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\n/// @title Creates and initializes V3 Pools\n/// @notice Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that\n/// require the pool to exist.\ninterface IPoolInitializer {\n  /// @notice Creates a new pool if it does not exist, then initializes if not initialized\n  /// @dev This method can be bundled with others via IMulticall for the first action (e.g. mint) performed against a pool\n  /// @param token0 The contract address of token0 of the pool\n  /// @param token1 The contract address of token1 of the pool\n  /// @param fee The fee amount of the v3 pool for the specified token pair\n  /// @param sqrtPriceX96 The initial square root price of the pool as a Q64.96 value\n  /// @return pool Returns the pool address based on the pair of tokens and fee, will return the newly created pool address if necessary\n  function createAndInitializePoolIfNecessary(\n    address token0,\n    address token1,\n    uint24 fee,\n    uint160 sqrtPriceX96\n  ) external payable returns (address pool);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IQuoter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\n/// @title Quoter Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoter {\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\n  /// @param amountIn The amount of the first token to swap\n  /// @return amountOut The amount of the last token that would be received\n  function quoteExactInput(\n    bytes memory path,\n    uint256 amountIn\n  ) external returns (uint256 amountOut);\n\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n  /// @param tokenIn The token being swapped in\n  /// @param tokenOut The token being swapped out\n  /// @param fee The fee of the token pool to consider for the pair\n  /// @param amountIn The desired input amount\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n  /// @return amountOut The amount of `tokenOut` that would be received\n  function quoteExactInputSingle(\n    address tokenIn,\n    address tokenOut,\n    uint24 fee,\n    uint256 amountIn,\n    uint160 sqrtPriceLimitX96\n  ) external returns (uint256 amountOut);\n\n  /// @notice Returns the amount in required for a given exact output swap without executing the swap\n  /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n  /// @param amountOut The amount of the last token to receive\n  /// @return amountIn The amount of first token required to be paid\n  function quoteExactOutput(\n    bytes memory path,\n    uint256 amountOut\n  ) external returns (uint256 amountIn);\n\n  /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n  /// @param tokenIn The token being swapped in\n  /// @param tokenOut The token being swapped out\n  /// @param fee The fee of the token pool to consider for the pair\n  /// @param amountOut The desired output amount\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n  /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n  function quoteExactOutputSingle(\n    address tokenIn,\n    address tokenOut,\n    uint24 fee,\n    uint256 amountOut,\n    uint160 sqrtPriceLimitX96\n  ) external returns (uint256 amountIn);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/ISelfPermit.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Self Permit\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\ninterface ISelfPermit {\n  /// @notice Permits this contract to spend a given token from `msg.sender`\n  /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n  /// @param token The address of the token spent\n  /// @param value The amount that can be spent of token\n  /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function selfPermit(\n    address token,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n\n  /// @notice Permits this contract to spend a given token from `msg.sender`\n  /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\n  /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\n  /// @param token The address of the token spent\n  /// @param value The amount that can be spent of token\n  /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function selfPermitIfNecessary(\n    address token,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n\n  /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n  /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n  /// @param token The address of the token spent\n  /// @param nonce The current nonce of the owner\n  /// @param expiry The timestamp at which the permit is no longer valid\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function selfPermitAllowed(\n    address token,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n\n  /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\n  /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\n  /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\n  /// @param token The address of the token spent\n  /// @param nonce The current nonce of the owner\n  /// @param expiry The timestamp at which the permit is no longer valid\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\n  function selfPermitAllowedIfNecessary(\n    address token,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external payable;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\npragma abicoder v2;\n\nimport \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\";\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n  struct ExactInputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n  /// @return amountOut The amount of the received token\n  function exactInputSingle(\n    ExactInputSingleParams calldata params\n  ) external payable returns (uint256 amountOut);\n\n  struct ExactInputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountIn;\n    uint256 amountOutMinimum;\n  }\n\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n  /// @return amountOut The amount of the received token\n  function exactInput(\n    ExactInputParams calldata params\n  ) external payable returns (uint256 amountOut);\n\n  struct ExactOutputSingleParams {\n    address tokenIn;\n    address tokenOut;\n    uint24 fee;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n    uint160 sqrtPriceLimitX96;\n  }\n\n  /// @notice Swaps as little as possible of one token for `amountOut` of another token\n  /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n  /// @return amountIn The amount of the input token\n  function exactOutputSingle(\n    ExactOutputSingleParams calldata params\n  ) external payable returns (uint256 amountIn);\n\n  struct ExactOutputParams {\n    bytes path;\n    address recipient;\n    uint256 deadline;\n    uint256 amountOut;\n    uint256 amountInMaximum;\n  }\n\n  /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n  /// @return amountIn The amount of the input token\n  function exactOutput(\n    ExactOutputParams calldata params\n  ) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n  /// @notice Emitted when the owner of the factory is changed\n  /// @param oldOwner The owner before the owner was changed\n  /// @param newOwner The owner after the owner was changed\n  event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n  /// @notice Emitted when a pool is created\n  /// @param token0 The first token of the pool by address sort order\n  /// @param token1 The second token of the pool by address sort order\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// @param tickSpacing The minimum number of ticks between initialized ticks\n  /// @param pool The address of the created pool\n  event PoolCreated(\n    address indexed token0,\n    address indexed token1,\n    uint24 indexed fee,\n    int24 tickSpacing,\n    address pool\n  );\n\n  /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n  /// @param fee The enabled fee, denominated in hundredths of a bip\n  /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n  event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n  /// @notice Returns the current owner of the factory\n  /// @dev Can be changed by the current owner via setOwner\n  /// @return The address of the factory owner\n  function owner() external view returns (address);\n\n  /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n  /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n  /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n  /// @return The tick spacing\n  function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n  /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n  /// @param tokenA The contract address of either token0 or token1\n  /// @param tokenB The contract address of the other token\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// @return pool The pool address\n  function getPool(address tokenA, address tokenB, uint24 fee) external view returns (address pool);\n\n  /// @notice Creates a pool for the given two tokens and fee\n  /// @param tokenA One of the two tokens in the desired pool\n  /// @param tokenB The other of the two tokens in the desired pool\n  /// @param fee The desired fee for the pool\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n  /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n  /// are invalid.\n  /// @return pool The address of the newly created pool\n  function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\n\n  /// @notice Updates the owner of the factory\n  /// @dev Must be called by the current owner\n  /// @param _owner The new owner of the factory\n  function setOwner(address _owner) external;\n\n  /// @notice Enables a fee amount with the given tickSpacing\n  /// @dev Fee amounts may never be removed once enabled\n  /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n  /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n  function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"./pool/IUniswapV3PoolImmutables.sol\";\nimport \"./pool/IUniswapV3PoolState.sol\";\nimport \"./pool/IUniswapV3PoolDerivedState.sol\";\nimport \"./pool/IUniswapV3PoolActions.sol\";\nimport \"./pool/IUniswapV3PoolOwnerActions.sol\";\nimport \"./pool/IUniswapV3PoolEvents.sol\";\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n  IUniswapV3PoolImmutables,\n  IUniswapV3PoolState,\n  IUniswapV3PoolDerivedState,\n  IUniswapV3PoolActions,\n  IUniswapV3PoolOwnerActions,\n  IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/IUniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\ninterface IUniswapV3PoolDeployer {\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\n  /// Returns factory The factory address\n  /// Returns token0 The first token of the pool by address sort order\n  /// Returns token1 The second token of the pool by address sort order\n  /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// Returns tickSpacing The minimum number of ticks between initialized ticks\n  function parameters()\n    external\n    view\n    returns (address factory, address token0, address token1, uint24 fee, int24 tickSpacing);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n  /// @notice Sets the initial price for the pool\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n  /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n  function initialize(uint160 sqrtPriceX96) external;\n\n  /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n  /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n  /// @param recipient The address for which the liquidity will be created\n  /// @param tickLower The lower tick of the position in which to add liquidity\n  /// @param tickUpper The upper tick of the position in which to add liquidity\n  /// @param amount The amount of liquidity to mint\n  /// @param data Any data that should be passed through to the callback\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n  function mint(\n    address recipient,\n    int24 tickLower,\n    int24 tickUpper,\n    uint128 amount,\n    bytes calldata data\n  ) external returns (uint256 amount0, uint256 amount1);\n\n  /// @notice Collects tokens owed to a position\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n  /// @param recipient The address which should receive the fees collected\n  /// @param tickLower The lower tick of the position for which to collect fees\n  /// @param tickUpper The upper tick of the position for which to collect fees\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n  /// @return amount0 The amount of fees collected in token0\n  /// @return amount1 The amount of fees collected in token1\n  function collect(\n    address recipient,\n    int24 tickLower,\n    int24 tickUpper,\n    uint128 amount0Requested,\n    uint128 amount1Requested\n  ) external returns (uint128 amount0, uint128 amount1);\n\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n  /// @dev Fees must be collected separately via a call to #collect\n  /// @param tickLower The lower tick of the position for which to burn liquidity\n  /// @param tickUpper The upper tick of the position for which to burn liquidity\n  /// @param amount How much liquidity to burn\n  /// @return amount0 The amount of token0 sent to the recipient\n  /// @return amount1 The amount of token1 sent to the recipient\n  function burn(\n    int24 tickLower,\n    int24 tickUpper,\n    uint128 amount\n  ) external returns (uint256 amount0, uint256 amount1);\n\n  /// @notice Swap token0 for token1, or token1 for token0\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n  /// @param recipient The address to receive the output of the swap\n  /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n  /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n  /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n  /// @param data Any data to be passed through to the callback\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n  function swap(\n    address recipient,\n    bool zeroForOne,\n    int256 amountSpecified,\n    uint160 sqrtPriceLimitX96,\n    bytes calldata data\n  ) external returns (int256 amount0, int256 amount1);\n\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n  /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n  /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n  /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n  /// @param recipient The address which will receive the token0 and token1 amounts\n  /// @param amount0 The amount of token0 to send\n  /// @param amount1 The amount of token1 to send\n  /// @param data Any data to be passed through to the callback\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\n\n  /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n  /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n  /// the input observationCardinalityNext.\n  /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n  function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n  /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n  /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n  /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n  /// you must call it with secondsAgos = [3600, 0].\n  /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n  /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n  /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n  /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n  /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n  /// timestamp\n  function observe(\n    uint32[] calldata secondsAgos\n  )\n    external\n    view\n    returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n  /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n  /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n  /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n  /// snapshot is taken and the second snapshot is taken.\n  /// @param tickLower The lower tick of the range\n  /// @param tickUpper The upper tick of the range\n  /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n  /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n  /// @return secondsInside The snapshot of seconds per liquidity for the range\n  function snapshotCumulativesInside(\n    int24 tickLower,\n    int24 tickUpper\n  )\n    external\n    view\n    returns (\n      int56 tickCumulativeInside,\n      uint160 secondsPerLiquidityInsideX128,\n      uint32 secondsInside\n    );\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n  /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n  event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n  /// @notice Emitted when liquidity is minted for a given position\n  /// @param sender The address that minted the liquidity\n  /// @param owner The owner of the position and recipient of any minted liquidity\n  /// @param tickLower The lower tick of the position\n  /// @param tickUpper The upper tick of the position\n  /// @param amount The amount of liquidity minted to the position range\n  /// @param amount0 How much token0 was required for the minted liquidity\n  /// @param amount1 How much token1 was required for the minted liquidity\n  event Mint(\n    address sender,\n    address indexed owner,\n    int24 indexed tickLower,\n    int24 indexed tickUpper,\n    uint128 amount,\n    uint256 amount0,\n    uint256 amount1\n  );\n\n  /// @notice Emitted when fees are collected by the owner of a position\n  /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n  /// @param owner The owner of the position for which fees are collected\n  /// @param tickLower The lower tick of the position\n  /// @param tickUpper The upper tick of the position\n  /// @param amount0 The amount of token0 fees collected\n  /// @param amount1 The amount of token1 fees collected\n  event Collect(\n    address indexed owner,\n    address recipient,\n    int24 indexed tickLower,\n    int24 indexed tickUpper,\n    uint128 amount0,\n    uint128 amount1\n  );\n\n  /// @notice Emitted when a position's liquidity is removed\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n  /// @param owner The owner of the position for which liquidity is removed\n  /// @param tickLower The lower tick of the position\n  /// @param tickUpper The upper tick of the position\n  /// @param amount The amount of liquidity to remove\n  /// @param amount0 The amount of token0 withdrawn\n  /// @param amount1 The amount of token1 withdrawn\n  event Burn(\n    address indexed owner,\n    int24 indexed tickLower,\n    int24 indexed tickUpper,\n    uint128 amount,\n    uint256 amount0,\n    uint256 amount1\n  );\n\n  /// @notice Emitted by the pool for any swaps between token0 and token1\n  /// @param sender The address that initiated the swap call, and that received the callback\n  /// @param recipient The address that received the output of the swap\n  /// @param amount0 The delta of the token0 balance of the pool\n  /// @param amount1 The delta of the token1 balance of the pool\n  /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n  /// @param liquidity The liquidity of the pool after the swap\n  /// @param tick The log base 1.0001 of price of the pool after the swap\n  event Swap(\n    address indexed sender,\n    address indexed recipient,\n    int256 amount0,\n    int256 amount1,\n    uint160 sqrtPriceX96,\n    uint128 liquidity,\n    int24 tick\n  );\n\n  /// @notice Emitted by the pool for any flashes of token0/token1\n  /// @param sender The address that initiated the swap call, and that received the callback\n  /// @param recipient The address that received the tokens from flash\n  /// @param amount0 The amount of token0 that was flashed\n  /// @param amount1 The amount of token1 that was flashed\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n  event Flash(\n    address indexed sender,\n    address indexed recipient,\n    uint256 amount0,\n    uint256 amount1,\n    uint256 paid0,\n    uint256 paid1\n  );\n\n  /// @notice Emitted by the pool for increases to the number of observations that can be stored\n  /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n  /// just before a mint/swap/burn.\n  /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n  /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n  event IncreaseObservationCardinalityNext(\n    uint16 observationCardinalityNextOld,\n    uint16 observationCardinalityNextNew\n  );\n\n  /// @notice Emitted when the protocol fee is changed by the pool\n  /// @param feeProtocol0Old The previous value of the token0 protocol fee\n  /// @param feeProtocol1Old The previous value of the token1 protocol fee\n  /// @param feeProtocol0New The updated value of the token0 protocol fee\n  /// @param feeProtocol1New The updated value of the token1 protocol fee\n  event SetFeeProtocol(\n    uint8 feeProtocol0Old,\n    uint8 feeProtocol1Old,\n    uint8 feeProtocol0New,\n    uint8 feeProtocol1New\n  );\n\n  /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n  /// @param sender The address that collects the protocol fees\n  /// @param recipient The address that receives the collected protocol fees\n  /// @param amount0 The amount of token0 protocol fees that is withdrawn\n  /// @param amount0 The amount of token1 protocol fees that is withdrawn\n  event CollectProtocol(\n    address indexed sender,\n    address indexed recipient,\n    uint128 amount0,\n    uint128 amount1\n  );\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n  /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n  /// @return The contract address\n  function factory() external view returns (address);\n\n  /// @notice The first of the two tokens of the pool, sorted by address\n  /// @return The token contract address\n  function token0() external view returns (address);\n\n  /// @notice The second of the two tokens of the pool, sorted by address\n  /// @return The token contract address\n  function token1() external view returns (address);\n\n  /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n  /// @return The fee\n  function fee() external view returns (uint24);\n\n  /// @notice The pool tick spacing\n  /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n  /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n  /// This value is an int24 to avoid casting even though it is always positive.\n  /// @return The tick spacing\n  function tickSpacing() external view returns (int24);\n\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n  /// @return The max amount of liquidity per tick\n  function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n  /// @notice Set the denominator of the protocol's % share of the fees\n  /// @param feeProtocol0 new protocol fee for token0 of the pool\n  /// @param feeProtocol1 new protocol fee for token1 of the pool\n  function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n  /// @notice Collect the protocol fee accrued to the pool\n  /// @param recipient The address to which collected protocol fees should be sent\n  /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n  /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n  /// @return amount0 The protocol fee collected in token0\n  /// @return amount1 The protocol fee collected in token1\n  function collectProtocol(\n    address recipient,\n    uint128 amount0Requested,\n    uint128 amount1Requested\n  ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/uniswap-contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n  /// when accessed externally.\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n  /// boundary.\n  /// observationIndex The index of the last oracle observation that was written,\n  /// observationCardinality The current maximum number of observations stored in the pool,\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n  /// feeProtocol The protocol fee for both tokens of the pool.\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n  /// unlocked Whether the pool is currently locked to reentrancy\n  function slot0()\n    external\n    view\n    returns (\n      uint160 sqrtPriceX96,\n      int24 tick,\n      uint16 observationIndex,\n      uint16 observationCardinality,\n      uint16 observationCardinalityNext,\n      uint8 feeProtocol,\n      bool unlocked\n    );\n\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n  /// @dev This value can overflow the uint256\n  function feeGrowthGlobal0X128() external view returns (uint256);\n\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n  /// @dev This value can overflow the uint256\n  function feeGrowthGlobal1X128() external view returns (uint256);\n\n  /// @notice The amounts of token0 and token1 that are owed to the protocol\n  /// @dev Protocol fees will never exceed uint128 max in either token\n  function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n  /// @notice The currently in range liquidity available to the pool\n  /// @dev This value has no relationship to the total liquidity across all ticks\n  function liquidity() external view returns (uint128);\n\n  /// @notice Look up information about a specific tick in the pool\n  /// @param tick The tick to look up\n  /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n  /// tick upper,\n  /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n  /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n  /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n  /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n  /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n  /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n  /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n  /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n  /// a specific position.\n  function ticks(\n    int24 tick\n  )\n    external\n    view\n    returns (\n      uint128 liquidityGross,\n      int128 liquidityNet,\n      uint256 feeGrowthOutside0X128,\n      uint256 feeGrowthOutside1X128,\n      int56 tickCumulativeOutside,\n      uint160 secondsPerLiquidityOutsideX128,\n      uint32 secondsOutside,\n      bool initialized\n    );\n\n  /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n  function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n  /// @notice Returns the information about a position by the position's key\n  /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n  /// @return liquidity The amount of liquidity in the position,\n  /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n  /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n  /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n  /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n  function positions(\n    bytes32 key\n  )\n    external\n    view\n    returns (\n      uint128 liquidity,\n      uint256 feeGrowthInside0LastX128,\n      uint256 feeGrowthInside1LastX128,\n      uint128 tokensOwed0,\n      uint128 tokensOwed1\n    );\n\n  /// @notice Returns data about a specific observation index\n  /// @param index The element of the observations array to fetch\n  /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n  /// ago, rather than at a specific index in the array.\n  /// @return blockTimestamp The timestamp of the observation,\n  /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n  /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n  /// Returns initialized whether the observation has been initialized and the values are safe to use\n  function observations(\n    uint256 index\n  )\n    external\n    view\n    returns (\n      uint32 blockTimestamp,\n      int56 tickCumulative,\n      uint160 secondsPerLiquidityCumulativeX128,\n      bool initialized\n    );\n}\n"
    },
    "contracts/uniswap-contracts/libraries/BitMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title BitMath\n/// @dev This library provides functionality for computing bit properties of an unsigned integer\nlibrary BitMath {\n  /// @notice Returns the index of the most significant bit of the number,\n  ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n  /// @dev The function satisfies the property:\n  ///     x >= 2**mostSignificantBit(x) and x < 2**(mostSignificantBit(x)+1)\n  /// @param x the value for which to compute the most significant bit, must be greater than 0\n  /// @return r the index of the most significant bit\n  function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n    require(x > 0);\n\n    if (x >= 0x100000000000000000000000000000000) {\n      x >>= 128;\n      r += 128;\n    }\n    if (x >= 0x10000000000000000) {\n      x >>= 64;\n      r += 64;\n    }\n    if (x >= 0x100000000) {\n      x >>= 32;\n      r += 32;\n    }\n    if (x >= 0x10000) {\n      x >>= 16;\n      r += 16;\n    }\n    if (x >= 0x100) {\n      x >>= 8;\n      r += 8;\n    }\n    if (x >= 0x10) {\n      x >>= 4;\n      r += 4;\n    }\n    if (x >= 0x4) {\n      x >>= 2;\n      r += 2;\n    }\n    if (x >= 0x2) r += 1;\n  }\n\n  /// @notice Returns the index of the least significant bit of the number,\n  ///     where the least significant bit is at index 0 and the most significant bit is at index 255\n  /// @dev The function satisfies the property:\n  ///     (x & 2**leastSignificantBit(x)) != 0 and (x & (2**(leastSignificantBit(x)) - 1)) == 0)\n  /// @param x the value for which to compute the least significant bit, must be greater than 0\n  /// @return r the index of the least significant bit\n  function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n    require(x > 0);\n\n    r = 255;\n    if (x & type(uint128).max > 0) {\n      r -= 128;\n    } else {\n      x >>= 128;\n    }\n    if (x & type(uint64).max > 0) {\n      r -= 64;\n    } else {\n      x >>= 64;\n    }\n    if (x & type(uint32).max > 0) {\n      r -= 32;\n    } else {\n      x >>= 32;\n    }\n    if (x & type(uint16).max > 0) {\n      r -= 16;\n    } else {\n      x >>= 16;\n    }\n    if (x & type(uint8).max > 0) {\n      r -= 8;\n    } else {\n      x >>= 8;\n    }\n    if (x & 0xf > 0) {\n      r -= 4;\n    } else {\n      x >>= 4;\n    }\n    if (x & 0x3 > 0) {\n      r -= 2;\n    } else {\n      x >>= 2;\n    }\n    if (x & 0x1 > 0) r -= 1;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity ^0.8.9;\n\nlibrary BytesLib {\n  function slice(\n    bytes memory _bytes,\n    uint256 _start,\n    uint256 _length\n  ) internal pure returns (bytes memory) {\n    require(_length + 31 >= _length, \"slice_overflow\");\n    require(_start + _length >= _start, \"slice_overflow\");\n    require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n    bytes memory tempBytes;\n\n    assembly {\n      switch iszero(_length)\n      case 0 {\n        // Get a location of some free memory and store it in tempBytes as\n        // Solidity does for memory variables.\n        tempBytes := mload(0x40)\n\n        // The first word of the slice result is potentially a partial\n        // word read from the original array. To read it, we calculate\n        // the length of that partial word and start copying that many\n        // bytes into the array. The first word we copy will start with\n        // data we don't care about, but the last `lengthmod` bytes will\n        // land at the beginning of the contents of the new array. When\n        // we're done copying, we overwrite the full first word with\n        // the actual length of the slice.\n        let lengthmod := and(_length, 31)\n\n        // The multiplication in the next line is necessary\n        // because when slicing multiples of 32 bytes (lengthmod == 0)\n        // the following copy loop was copying the origin's length\n        // and then ending prematurely not copying everything it should.\n        let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n        let end := add(mc, _length)\n\n        for {\n          // The multiplication in the next line has the same exact purpose\n          // as the one above.\n          let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n        } lt(mc, end) {\n          mc := add(mc, 0x20)\n          cc := add(cc, 0x20)\n        } {\n          mstore(mc, mload(cc))\n        }\n\n        mstore(tempBytes, _length)\n\n        //update free-memory pointer\n        //allocating the array padded to 32 bytes like the compiler does now\n        mstore(0x40, and(add(mc, 31), not(31)))\n      }\n      //if we want a zero-length slice let's just return a zero-length array\n      default {\n        tempBytes := mload(0x40)\n        //zero out the 32 bytes slice we are about to return\n        //we need to do it because Solidity does not garbage collect\n        mstore(tempBytes, 0)\n\n        mstore(0x40, add(tempBytes, 0x20))\n      }\n    }\n\n    return tempBytes;\n  }\n\n  function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n    require(_start + 20 >= _start, \"toAddress_overflow\");\n    require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n    address tempAddress;\n\n    assembly {\n      tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n    }\n\n    return tempAddress;\n  }\n\n  function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\n    require(_start + 3 >= _start, \"toUint24_overflow\");\n    require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\n    uint24 tempUint;\n\n    assembly {\n      tempUint := mload(add(add(_bytes, 0x3), _start))\n    }\n\n    return tempUint;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/CallbackValidation.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IUniswapV3Pool.sol\";\nimport \"./PoolAddress.sol\";\n\n/// @notice Provides validation for callbacks from Uniswap V3 Pools\nlibrary CallbackValidation {\n  /// @notice Returns the address of a valid Uniswap V3 Pool\n  /// @param factory The contract address of the Uniswap V3 factory\n  /// @param tokenA The contract address of either token0 or token1\n  /// @param tokenB The contract address of the other token\n  /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n  /// @return pool The V3 pool contract address\n  function verifyCallback(\n    address factory,\n    address tokenA,\n    address tokenB,\n    uint24 fee\n  ) internal view returns (IUniswapV3Pool pool) {\n    return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\n  }\n\n  /// @notice Returns the address of a valid Uniswap V3 Pool\n  /// @param factory The contract address of the Uniswap V3 factory\n  /// @param poolKey The identifying key of the V3 pool\n  /// @return pool The V3 pool contract address\n  function verifyCallback(\n    address factory,\n    PoolAddress.PoolKey memory poolKey\n  ) internal view returns (IUniswapV3Pool pool) {\n    pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\n    require(msg.sender == address(pool));\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/ChainId.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Function for getting the current chain ID\nlibrary ChainId {\n  /// @dev Gets the current chain ID\n  /// @return chainId The current chain ID\n  function get() internal view returns (uint256 chainId) {\n    assembly {\n      chainId := chainid()\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/FixedPoint128.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title FixedPoint128\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\nlibrary FixedPoint128 {\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\n}\n"
    },
    "contracts/uniswap-contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n  uint8 internal constant RESOLUTION = 96;\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/uniswap-contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n  /// @notice Calculates floor(aÃ—bÃ·denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n  /// @param a The multiplicand\n  /// @param b The multiplier\n  /// @param denominator The divisor\n  /// @return result The 256-bit result\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n  function mulDiv(\n    uint256 a,\n    uint256 b,\n    uint256 denominator\n  ) internal pure returns (uint256 result) {\n    // 512-bit multiply [prod1 prod0] = a * b\n    // Compute the product mod 2**256 and mod 2**256 - 1\n    // then use the Chinese Remainder Theorem to reconstruct\n    // the 512 bit result. The result is stored in two 256\n    // variables such that product = prod1 * 2**256 + prod0\n    uint256 prod0; // Least significant 256 bits of the product\n    uint256 prod1; // Most significant 256 bits of the product\n    assembly {\n      let mm := mulmod(a, b, not(0))\n      prod0 := mul(a, b)\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n    }\n\n    // Handle non-overflow cases, 256 by 256 division\n    if (prod1 == 0) {\n      require(denominator > 0);\n      assembly {\n        result := div(prod0, denominator)\n      }\n      return result;\n    }\n\n    // Make sure the result is less than 2**256.\n    // Also prevents denominator == 0\n    require(denominator > prod1);\n\n    ///////////////////////////////////////////////\n    // 512 by 256 division.\n    ///////////////////////////////////////////////\n\n    // Make division exact by subtracting the remainder from [prod1 prod0]\n    // Compute remainder using mulmod\n    uint256 remainder;\n    assembly {\n      remainder := mulmod(a, b, denominator)\n    }\n    // Subtract 256 bit number from 512 bit number\n    assembly {\n      prod1 := sub(prod1, gt(remainder, prod0))\n      prod0 := sub(prod0, remainder)\n    }\n\n    // Factor powers of two out of denominator\n    // Compute largest power of two divisor of denominator.\n    // Always >= 1.\n    uint256 twos = uint256((-1 * int(denominator)) & int(denominator));\n    // Divide denominator by power of two\n    assembly {\n      denominator := div(denominator, twos)\n    }\n\n    // Divide [prod1 prod0] by the factors of two\n    assembly {\n      prod0 := div(prod0, twos)\n    }\n    // Shift in bits from prod1 into prod0. For this we need\n    // to flip `twos` such that it is 2**256 / twos.\n    // If twos is zero, then it becomes one\n    assembly {\n      twos := add(div(sub(0, twos), twos), 1)\n    }\n    prod0 |= prod1 * twos;\n\n    // Invert denominator mod 2**256\n    // Now that denominator is an odd number, it has an inverse\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n    // Compute the inverse by starting with a seed that is correct\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\n    uint256 inv = (3 * denominator) ^ 2;\n    // Now use Newton-Raphson iteration to improve the precision.\n    // Thanks to Hensel's lifting lemma, this also works in modular\n    // arithmetic, doubling the correct bits in each step.\n    inv *= 2 - denominator * inv; // inverse mod 2**8\n    inv *= 2 - denominator * inv; // inverse mod 2**16\n    inv *= 2 - denominator * inv; // inverse mod 2**32\n    inv *= 2 - denominator * inv; // inverse mod 2**64\n    inv *= 2 - denominator * inv; // inverse mod 2**128\n    inv *= 2 - denominator * inv; // inverse mod 2**256\n\n    // Because the division is now exact we can divide by multiplying\n    // with the modular inverse of denominator. This will give us the\n    // correct result modulo 2**256. Since the precoditions guarantee\n    // that the outcome is less than 2**256, this is the final result.\n    // We don't need to compute the high bits of the result and prod1\n    // is no longer required.\n    result = prod0 * inv;\n    return result;\n  }\n\n  /// @notice Calculates ceil(aÃ—bÃ·denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n  /// @param a The multiplicand\n  /// @param b The multiplier\n  /// @param denominator The divisor\n  /// @return result The 256-bit result\n  function mulDivRoundingUp(\n    uint256 a,\n    uint256 b,\n    uint256 denominator\n  ) internal pure returns (uint256 result) {\n    result = mulDiv(a, b, denominator);\n    if (mulmod(a, b, denominator) > 0) {\n      require(result < type(uint256).max);\n      result++;\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n  /// @notice Downcasts uint256 to uint128\n  /// @param x The uint258 to be downcasted\n  /// @return y The passed value, downcasted to uint128\n  function toUint128(uint256 x) private pure returns (uint128 y) {\n    require((y = uint128(x)) == x);\n  }\n\n  /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n  /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n  /// @param amount0 The amount0 being sent in\n  /// @return liquidity The amount of returned liquidity\n  function getLiquidityForAmount0(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0\n  ) internal pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n    uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\n    liquidity = toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\n  }\n\n  /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n  /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n  /// @param amount1 The amount1 being sent in\n  /// @return liquidity The amount of returned liquidity\n  function getLiquidityForAmount1(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount1\n  ) internal pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n    liquidity = toUint128(\n      FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96)\n    );\n  }\n\n  /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n  /// pool prices and the prices at the tick boundaries\n  /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n  /// @param amount0 The amount of token0 being sent in\n  /// @param amount1 The amount of token1 being sent in\n  /// @return liquidity The maximum amount of liquidity received\n  function getLiquidityForAmounts(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint256 amount0,\n    uint256 amount1\n  ) internal pure returns (uint128 liquidity) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\n      liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\n      uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\n      uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\n\n      liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n    } else {\n      liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\n    }\n  }\n\n  /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n  /// @param liquidity The liquidity being valued\n  /// @return amount0 The amount of token0\n  function getAmount0ForLiquidity(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) internal pure returns (uint256 amount0) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return\n      FullMath.mulDiv(\n        uint256(liquidity) << FixedPoint96.RESOLUTION,\n        sqrtRatioBX96 - sqrtRatioAX96,\n        sqrtRatioBX96\n      ) / sqrtRatioAX96;\n  }\n\n  /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n  /// @param liquidity The liquidity being valued\n  /// @return amount1 The amount of token1\n  function getAmount1ForLiquidity(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) internal pure returns (uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n  }\n\n  /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n  /// pool prices and the prices at the tick boundaries\n  /// @param sqrtRatioX96 A sqrt price representing the current pool prices\n  /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\n  /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\n  /// @param liquidity The liquidity being valued\n  /// @return amount0 The amount of token0\n  /// @return amount1 The amount of token1\n  function getAmountsForLiquidity(\n    uint160 sqrtRatioX96,\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity\n  ) internal pure returns (uint256 amount0, uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    if (sqrtRatioX96 <= sqrtRatioAX96) {\n      amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    } else if (sqrtRatioX96 < sqrtRatioBX96) {\n      amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\n    } else {\n      amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/LiquidityMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Math library for liquidity\nlibrary LiquidityMath {\n  /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\n  /// @param x The liquidity before change\n  /// @param y The delta by which liquidity should be changed\n  /// @return z The liquidity delta\n  function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\n    if (y < 0) {\n      require((z = x - uint128(-y)) < x, \"LS\");\n    } else {\n      require((z = x + uint128(y)) >= x, \"LA\");\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/LowGasSafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Optimized overflow and underflow safe math operations\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\nlibrary LowGasSafeMath {\n  /// @notice Returns x + y, reverts if sum overflows uint256\n  /// @param x The augend\n  /// @param y The addend\n  /// @return z The sum of x and y\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    require((z = x + y) >= x);\n  }\n\n  /// @notice Returns x - y, reverts if underflows\n  /// @param x The minuend\n  /// @param y The subtrahend\n  /// @return z The difference of x and y\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    require((z = x - y) <= x);\n  }\n\n  /// @notice Returns x * y, reverts if overflows\n  /// @param x The multiplicand\n  /// @param y The multiplier\n  /// @return z The product of x and y\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    require(x == 0 || (z = x * y) / x == y);\n  }\n\n  /// @notice Returns x + y, reverts if overflows or underflows\n  /// @param x The augend\n  /// @param y The addend\n  /// @return z The sum of x and y\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\n    require((z = x + y) >= x == (y >= 0));\n  }\n\n  /// @notice Returns x - y, reverts if overflows or underflows\n  /// @param x The minuend\n  /// @param y The subtrahend\n  /// @return z The difference of x and y\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\n    require((z = x - y) <= x == (y >= 0));\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/Oracle.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.9;\n\n/// @title Oracle\n/// @notice Provides price and liquidity data useful for a wide variety of system designs\n/// @dev Instances of stored oracle data, \"observations\", are collected in the oracle array\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\n/// Observations are overwritten when the full length of the oracle array is populated.\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\nlibrary Oracle {\n  struct Observation {\n    // the block timestamp of the observation\n    uint32 blockTimestamp;\n    // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\n    int56 tickCumulative;\n    // the seconds per liquidity, i.e. seconds elapsed / max(1, liquidity) since the pool was first initialized\n    uint160 secondsPerLiquidityCumulativeX128;\n    // whether or not the observation is initialized\n    bool initialized;\n  }\n\n  /// @notice Transforms a previous observation into a new observation, given the passage of time and the current tick and liquidity values\n  /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\n  /// @param last The specified observation to be transformed\n  /// @param blockTimestamp The timestamp of the new observation\n  /// @param tick The active tick at the time of the new observation\n  /// @param liquidity The total in-range liquidity at the time of the new observation\n  /// @return Observation The newly populated observation\n  function transform(\n    Observation memory last,\n    uint32 blockTimestamp,\n    int24 tick,\n    uint128 liquidity\n  ) private pure returns (Observation memory) {\n    uint32 delta = blockTimestamp - last.blockTimestamp;\n    return\n      Observation({\n        blockTimestamp: blockTimestamp,\n        tickCumulative: int56(last.tickCumulative) + int56(tick) * int56(int32(delta)),\n        secondsPerLiquidityCumulativeX128: last.secondsPerLiquidityCumulativeX128 +\n          ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)),\n        initialized: true\n      });\n  }\n\n  /// @notice Initialize the oracle array by writing the first slot. Called once for the lifecycle of the observations array\n  /// @param self The stored oracle array\n  /// @param time The time of the oracle initialization, via block.timestamp truncated to uint32\n  /// @return cardinality The number of populated elements in the oracle array\n  /// @return cardinalityNext The new length of the oracle array, independent of population\n  function initialize(\n    Observation[65535] storage self,\n    uint32 time\n  ) internal returns (uint16 cardinality, uint16 cardinalityNext) {\n    self[0] = Observation({\n      blockTimestamp: time,\n      tickCumulative: 0,\n      secondsPerLiquidityCumulativeX128: 0,\n      initialized: true\n    });\n    return (1, 1);\n  }\n\n  /// @notice Writes an oracle observation to the array\n  /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\n  /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\n  /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\n  /// @param self The stored oracle array\n  /// @param index The index of the observation that was most recently written to the observations array\n  /// @param blockTimestamp The timestamp of the new observation\n  /// @param tick The active tick at the time of the new observation\n  /// @param liquidity The total in-range liquidity at the time of the new observation\n  /// @param cardinality The number of populated elements in the oracle array\n  /// @param cardinalityNext The new length of the oracle array, independent of population\n  /// @return indexUpdated The new index of the most recently written element in the oracle array\n  /// @return cardinalityUpdated The new cardinality of the oracle array\n  function write(\n    Observation[65535] storage self,\n    uint16 index,\n    uint32 blockTimestamp,\n    int24 tick,\n    uint128 liquidity,\n    uint16 cardinality,\n    uint16 cardinalityNext\n  ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\n    Observation memory last = self[index];\n\n    // early return if we've already written an observation this block\n    if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\n\n    // if the conditions are right, we can bump the cardinality\n    if (cardinalityNext > cardinality && index == (cardinality - 1)) {\n      cardinalityUpdated = cardinalityNext;\n    } else {\n      cardinalityUpdated = cardinality;\n    }\n\n    indexUpdated = (index + 1) % cardinalityUpdated;\n    self[indexUpdated] = transform(last, blockTimestamp, tick, liquidity);\n  }\n\n  /// @notice Prepares the oracle array to store up to `next` observations\n  /// @param self The stored oracle array\n  /// @param current The current next cardinality of the oracle array\n  /// @param next The proposed next cardinality which will be populated in the oracle array\n  /// @return next The next cardinality which will be populated in the oracle array\n  function grow(\n    Observation[65535] storage self,\n    uint16 current,\n    uint16 next\n  ) internal returns (uint16) {\n    require(current > 0, \"I\");\n    // no-op if the passed next value isn't greater than the current next value\n    if (next <= current) return current;\n    // store in each slot to prevent fresh SSTOREs in swaps\n    // this data will not be used because the initialized boolean is still false\n    for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\n    return next;\n  }\n\n  /// @notice comparator for 32-bit timestamps\n  /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to time\n  /// @param time A timestamp truncated to 32 bits\n  /// @param a A comparison timestamp from which to determine the relative position of `time`\n  /// @param b From which to determine the relative position of `time`\n  /// @return bool Whether `a` is chronologically <= `b`\n  function lte(uint32 time, uint32 a, uint32 b) private pure returns (bool) {\n    // if there hasn't been overflow, no need to adjust\n    if (a <= time && b <= time) return a <= b;\n\n    uint256 aAdjusted = a > time ? a : a + 2 ** 32;\n    uint256 bAdjusted = b > time ? b : b + 2 ** 32;\n\n    return aAdjusted <= bAdjusted;\n  }\n\n  /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\n  /// The result may be the same observation, or adjacent observations.\n  /// @dev The answer must be contained in the array, used when the target is located within the stored observation\n  /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\n  /// @param self The stored oracle array\n  /// @param time The current block.timestamp\n  /// @param target The timestamp at which the reserved observation should be for\n  /// @param index The index of the observation that was most recently written to the observations array\n  /// @param cardinality The number of populated elements in the oracle array\n  /// @return beforeOrAt The observation recorded before, or at, the target\n  /// @return atOrAfter The observation recorded at, or after, the target\n  function binarySearch(\n    Observation[65535] storage self,\n    uint32 time,\n    uint32 target,\n    uint16 index,\n    uint16 cardinality\n  ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n    uint256 l = (index + 1) % cardinality; // oldest observation\n    uint256 r = l + cardinality - 1; // newest observation\n    uint256 i;\n    while (true) {\n      i = (l + r) / 2;\n\n      beforeOrAt = self[i % cardinality];\n\n      // we've landed on an uninitialized tick, keep searching higher (more recently)\n      if (!beforeOrAt.initialized) {\n        l = i + 1;\n        continue;\n      }\n\n      atOrAfter = self[(i + 1) % cardinality];\n\n      bool targetAtOrAfter = lte(time, beforeOrAt.blockTimestamp, target);\n\n      // check if we've found the answer!\n      if (targetAtOrAfter && lte(time, target, atOrAfter.blockTimestamp)) break;\n\n      if (!targetAtOrAfter) r = i - 1;\n      else l = i + 1;\n    }\n  }\n\n  /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\n  /// @dev Assumes there is at least 1 initialized observation.\n  /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\n  /// @param self The stored oracle array\n  /// @param time The current block.timestamp\n  /// @param target The timestamp at which the reserved observation should be for\n  /// @param tick The active tick at the time of the returned or simulated observation\n  /// @param index The index of the observation that was most recently written to the observations array\n  /// @param liquidity The total pool liquidity at the time of the call\n  /// @param cardinality The number of populated elements in the oracle array\n  /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\n  /// @return atOrAfter The observation which occurred at, or after, the given timestamp\n  function getSurroundingObservations(\n    Observation[65535] storage self,\n    uint32 time,\n    uint32 target,\n    int24 tick,\n    uint16 index,\n    uint128 liquidity,\n    uint16 cardinality\n  ) private view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\n    // optimistically set before to the newest observation\n    beforeOrAt = self[index];\n\n    // if the target is chronologically at or after the newest observation, we can early return\n    if (lte(time, beforeOrAt.blockTimestamp, target)) {\n      if (beforeOrAt.blockTimestamp == target) {\n        // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\n        return (beforeOrAt, atOrAfter);\n      } else {\n        // otherwise, we need to transform\n        return (beforeOrAt, transform(beforeOrAt, target, tick, liquidity));\n      }\n    }\n\n    // now, set before to the oldest observation\n    beforeOrAt = self[(index + 1) % cardinality];\n    if (!beforeOrAt.initialized) beforeOrAt = self[0];\n\n    // ensure that the target is chronologically at or after the oldest observation\n    require(lte(time, beforeOrAt.blockTimestamp, target), \"OLD\");\n\n    // if we've reached this point, we have to binary search\n    return binarySearch(self, time, target, index, cardinality);\n  }\n\n  /// @dev Reverts if an observation at or before the desired observation timestamp does not exist.\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\n  /// If called with a timestamp falling between two observations, returns the counterfactual accumulator values\n  /// at exactly the timestamp between the two observations.\n  /// @param self The stored oracle array\n  /// @param time The current block timestamp\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an observation\n  /// @param tick The current tick\n  /// @param index The index of the observation that was most recently written to the observations array\n  /// @param liquidity The current in-range pool liquidity\n  /// @param cardinality The number of populated elements in the oracle array\n  /// @return tickCumulative The tick * time elapsed since the pool was first initialized, as of `secondsAgo`\n  /// @return secondsPerLiquidityCumulativeX128 The time elapsed / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\n  function observeSingle(\n    Observation[65535] storage self,\n    uint32 time,\n    uint32 secondsAgo,\n    int24 tick,\n    uint16 index,\n    uint128 liquidity,\n    uint16 cardinality\n  ) internal view returns (int56 tickCumulative, uint160 secondsPerLiquidityCumulativeX128) {\n    if (secondsAgo == 0) {\n      Observation memory last = self[index];\n      if (last.blockTimestamp != time) last = transform(last, time, tick, liquidity);\n      return (last.tickCumulative, last.secondsPerLiquidityCumulativeX128);\n    }\n\n    uint32 target = time - secondsAgo;\n\n    (Observation memory beforeOrAt, Observation memory atOrAfter) = getSurroundingObservations(\n      self,\n      time,\n      target,\n      tick,\n      index,\n      liquidity,\n      cardinality\n    );\n\n    if (target == beforeOrAt.blockTimestamp) {\n      // we're at the left boundary\n      return (beforeOrAt.tickCumulative, beforeOrAt.secondsPerLiquidityCumulativeX128);\n    } else if (target == atOrAfter.blockTimestamp) {\n      // we're at the right boundary\n      return (atOrAfter.tickCumulative, atOrAfter.secondsPerLiquidityCumulativeX128);\n    } else {\n      // we're in the middle\n      uint32 observationTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\n      uint32 targetDelta = target - beforeOrAt.blockTimestamp;\n      return (\n        beforeOrAt.tickCumulative +\n          ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) /\n            int56(int32(observationTimeDelta))) *\n          int32(targetDelta),\n        beforeOrAt.secondsPerLiquidityCumulativeX128 +\n          uint160(\n            (uint256(\n              atOrAfter.secondsPerLiquidityCumulativeX128 -\n                beforeOrAt.secondsPerLiquidityCumulativeX128\n            ) * targetDelta) / observationTimeDelta\n          )\n      );\n    }\n  }\n\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\n  /// @dev Reverts if `secondsAgos` > oldest observation\n  /// @param self The stored oracle array\n  /// @param time The current block.timestamp\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an observation\n  /// @param tick The current tick\n  /// @param index The index of the observation that was most recently written to the observations array\n  /// @param liquidity The current in-range pool liquidity\n  /// @param cardinality The number of populated elements in the oracle array\n  /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\n  /// @return secondsPerLiquidityCumulativeX128s The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\n  function observe(\n    Observation[65535] storage self,\n    uint32 time,\n    uint32[] memory secondsAgos,\n    int24 tick,\n    uint16 index,\n    uint128 liquidity,\n    uint16 cardinality\n  )\n    internal\n    view\n    returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s)\n  {\n    require(cardinality > 0, \"I\");\n\n    tickCumulatives = new int56[](secondsAgos.length);\n    secondsPerLiquidityCumulativeX128s = new uint160[](secondsAgos.length);\n    for (uint256 i = 0; i < secondsAgos.length; i++) {\n      (tickCumulatives[i], secondsPerLiquidityCumulativeX128s[i]) = observeSingle(\n        self,\n        time,\n        secondsAgos[i],\n        tick,\n        index,\n        liquidity,\n        cardinality\n      );\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"./BytesLib.sol\";\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n  using BytesLib for bytes;\n\n  /// @dev The length of the bytes encoded address\n  uint256 private constant ADDR_SIZE = 20;\n  /// @dev The length of the bytes encoded fee\n  uint256 private constant FEE_SIZE = 3;\n\n  /// @dev The offset of a single token address and pool fee\n  uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n  /// @dev The offset of an encoded pool key\n  uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n  /// @dev The minimum length of an encoding that contains 2 or more pools\n  uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\n\n  /// @notice Returns true iff the path contains two or more pools\n  /// @param path The encoded swap path\n  /// @return True if path contains two or more pools, otherwise false\n  function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n    return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n  }\n\n  /// @notice Returns the number of pools in the path\n  /// @param path The encoded swap path\n  /// @return The number of pools in the path\n  function numPools(bytes memory path) internal pure returns (uint256) {\n    // Ignore the first token address. From then on every fee and token offset indicates a pool.\n    return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n  }\n\n  /// @notice Decodes the first pool in path\n  /// @param path The bytes encoded swap path\n  /// @return tokenA The first token of the given pool\n  /// @return tokenB The second token of the given pool\n  /// @return fee The fee level of the pool\n  function decodeFirstPool(\n    bytes memory path\n  ) internal pure returns (address tokenA, address tokenB, uint24 fee) {\n    tokenA = path.toAddress(0);\n    fee = path.toUint24(ADDR_SIZE);\n    tokenB = path.toAddress(NEXT_OFFSET);\n  }\n\n  /// @notice Gets the segment corresponding to the first pool in the path\n  /// @param path The bytes encoded swap path\n  /// @return The segment containing all data necessary to target the first pool in the path\n  function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\n    return path.slice(0, POP_OFFSET);\n  }\n\n  /// @notice Skips a token + fee element from the buffer and returns the remainder\n  /// @param path The swap path\n  /// @return The remaining token + fee elements in the path\n  function skipToken(bytes memory path) internal pure returns (bytes memory) {\n    return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport {IUniswapV3Factory} from \"../interfaces/IUniswapV3Factory.sol\";\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n  bytes32 internal constant POOL_INIT_CODE_HASH =\n    0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n  /// @notice The identifying key of the pool\n  struct PoolKey {\n    address token0;\n    address token1;\n    uint24 fee;\n  }\n\n  /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n  /// @param tokenA The first token of a pool, unsorted\n  /// @param tokenB The second token of a pool, unsorted\n  /// @param fee The fee level of the pool\n  /// @return Poolkey The pool details with ordered token0 and token1 assignments\n  function getPoolKey(\n    address tokenA,\n    address tokenB,\n    uint24 fee\n  ) internal pure returns (PoolKey memory) {\n    if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n    return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n  }\n\n  /// @notice Deterministically computes the pool address given the factory and PoolKey\n  /// @param factory The Uniswap V3 factory contract address\n  /// @param key The PoolKey\n  /// @return pool The contract address of the V3 pool\n  function computeAddress(\n    address factory,\n    PoolKey memory key\n  ) internal view returns (address pool) {\n    require(key.token0 < key.token1);\n    // pool = address(\n    //   bytes20(\n    //     bytes32(\n    //       uint256(\n    //         keccak256(\n    //           abi.encodePacked(\n    //             hex\"ff\",\n    //             factory,\n    //             keccak256(abi.encode(key.token0, key.token1, key.fee)),\n    //             POOL_INIT_CODE_HASH\n    //           )\n    //         )\n    //       )\n    //     )\n    //   )\n    // );\n    pool = IUniswapV3Factory(factory).getPool(key.token0, key.token1, key.fee);\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.9;\n\nimport \"./FullMath.sol\";\nimport \"./FixedPoint128.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Position\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\n/// @dev Positions store additional state for tracking fees owed to the position\nlibrary Position {\n  // info stored for each user's position\n  struct Info {\n    // the amount of liquidity owned by this position\n    uint128 liquidity;\n    // fee growth per unit of liquidity as of the last update to liquidity or fees owed\n    uint256 feeGrowthInside0LastX128;\n    uint256 feeGrowthInside1LastX128;\n    // the fees owed to the position owner in token0/token1\n    uint128 tokensOwed0;\n    uint128 tokensOwed1;\n  }\n\n  /// @notice Returns the Info struct of a position, given an owner and position boundaries\n  /// @param self The mapping containing all user positions\n  /// @param owner The address of the position owner\n  /// @param tickLower The lower tick boundary of the position\n  /// @param tickUpper The upper tick boundary of the position\n  /// @return position The position info struct of the given owners' position\n  function get(\n    mapping(bytes32 => Info) storage self,\n    address owner,\n    int24 tickLower,\n    int24 tickUpper\n  ) internal view returns (Position.Info storage position) {\n    position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\n  }\n\n  /// @notice Credits accumulated fees to a user's position\n  /// @param self The individual position to update\n  /// @param liquidityDelta The change in pool liquidity as a result of the position update\n  /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n  /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n  function update(\n    Info storage self,\n    int128 liquidityDelta,\n    uint256 feeGrowthInside0X128,\n    uint256 feeGrowthInside1X128\n  ) internal {\n    Info memory _self = self;\n\n    uint128 liquidityNext;\n    if (liquidityDelta == 0) {\n      require(_self.liquidity > 0, \"NP\"); // disallow pokes for 0 liquidity positions\n      liquidityNext = _self.liquidity;\n    } else {\n      liquidityNext = LiquidityMath.addDelta(_self.liquidity, liquidityDelta);\n    }\n\n    // calculate accumulated fees\n    uint128 tokensOwed0 = uint128(\n      FullMath.mulDiv(\n        feeGrowthInside0X128 - _self.feeGrowthInside0LastX128,\n        _self.liquidity,\n        FixedPoint128.Q128\n      )\n    );\n    uint128 tokensOwed1 = uint128(\n      FullMath.mulDiv(\n        feeGrowthInside1X128 - _self.feeGrowthInside1LastX128,\n        _self.liquidity,\n        FixedPoint128.Q128\n      )\n    );\n\n    // update the position\n    if (liquidityDelta != 0) self.liquidity = liquidityNext;\n    self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\n    self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\n    if (tokensOwed0 > 0 || tokensOwed1 > 0) {\n      // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\n      self.tokensOwed0 += tokensOwed0;\n      self.tokensOwed1 += tokensOwed1;\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/PositionKey.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nlibrary PositionKey {\n  /// @dev Returns the key of the position in the core library\n  function compute(\n    address owner,\n    int24 tickLower,\n    int24 tickUpper\n  ) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Safe casting methods\n/// @notice Contains methods for safely casting between types\nlibrary SafeCast {\n  /// @notice Cast a uint256 to a uint160, revert on overflow\n  /// @param y The uint256 to be downcasted\n  /// @return z The downcasted integer, now type uint160\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\n    require((z = uint160(y)) == y);\n  }\n\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\n  /// @param y The int256 to be downcasted\n  /// @return z The downcasted integer, now type int128\n  function toInt128(int256 y) internal pure returns (int128 z) {\n    require((z = int128(y)) == y);\n  }\n\n  /// @notice Cast a uint256 to a int256, revert on overflow\n  /// @param y The uint256 to be casted\n  /// @return z The casted integer, now type int256\n  function toInt256(uint256 y) internal pure returns (int256 z) {\n    require(y < 2 ** 255);\n    z = int256(y);\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/SqrtPriceMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.9;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./FullMath.sol\";\nimport \"./UnsafeMath.sol\";\nimport \"./FixedPoint96.sol\";\n\n/// @title Functions based on Q64.96 sqrt price and liquidity\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\nlibrary SqrtPriceMath {\n  using LowGasSafeMath for uint256;\n  using SafeCast for uint256;\n\n  /// @notice Gets the next sqrt price given a delta of token0\n  /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\n  /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\n  /// price less in order to not send too much output.\n  /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\n  /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\n  /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\n  /// @param liquidity The amount of usable liquidity\n  /// @param amount How much of token0 to add or remove from virtual reserves\n  /// @param add Whether to add or remove the amount of token0\n  /// @return The price after adding or removing amount, depending on add\n  function getNextSqrtPriceFromAmount0RoundingUp(\n    uint160 sqrtPX96,\n    uint128 liquidity,\n    uint256 amount,\n    bool add\n  ) internal pure returns (uint160) {\n    // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\n    if (amount == 0) return sqrtPX96;\n    uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n\n    if (add) {\n      uint256 product;\n      if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\n        uint256 denominator = numerator1 + product;\n        if (denominator >= numerator1)\n          // always fits in 160 bits\n          return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\n      }\n\n      return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\n    } else {\n      uint256 product;\n      // if the product overflows, we know the denominator underflows\n      // in addition, we must check that the denominator does not underflow\n      require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\n      uint256 denominator = numerator1 - product;\n      return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\n    }\n  }\n\n  /// @notice Gets the next sqrt price given a delta of token1\n  /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\n  /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\n  /// price less in order to not send too much output.\n  /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\n  /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\n  /// @param liquidity The amount of usable liquidity\n  /// @param amount How much of token1 to add, or remove, from virtual reserves\n  /// @param add Whether to add, or remove, the amount of token1\n  /// @return The price after adding or removing `amount`\n  function getNextSqrtPriceFromAmount1RoundingDown(\n    uint160 sqrtPX96,\n    uint128 liquidity,\n    uint256 amount,\n    bool add\n  ) internal pure returns (uint160) {\n    // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\n    // in both cases, avoid a mulDiv for most inputs\n    if (add) {\n      uint256 quotient = (\n        amount <= type(uint160).max\n          ? (amount << FixedPoint96.RESOLUTION) / liquidity\n          : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\n      );\n\n      return uint256(sqrtPX96).add(quotient).toUint160();\n    } else {\n      uint256 quotient = (\n        amount <= type(uint160).max\n          ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\n          : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\n      );\n\n      require(sqrtPX96 > quotient);\n      // always fits 160 bits\n      return uint160(sqrtPX96 - quotient);\n    }\n  }\n\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\n  /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\n  /// @param liquidity The amount of usable liquidity\n  /// @param amountIn How much of token0, or token1, is being swapped in\n  /// @param zeroForOne Whether the amount in is token0 or token1\n  /// @return sqrtQX96 The price after adding the input amount to token0 or token1\n  function getNextSqrtPriceFromInput(\n    uint160 sqrtPX96,\n    uint128 liquidity,\n    uint256 amountIn,\n    bool zeroForOne\n  ) internal pure returns (uint160 sqrtQX96) {\n    require(sqrtPX96 > 0);\n    require(liquidity > 0);\n\n    // round to make sure that we don't pass the target price\n    return\n      zeroForOne\n        ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\n        : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\n  }\n\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\n  /// @param sqrtPX96 The starting price before accounting for the output amount\n  /// @param liquidity The amount of usable liquidity\n  /// @param amountOut How much of token0, or token1, is being swapped out\n  /// @param zeroForOne Whether the amount out is token0 or token1\n  /// @return sqrtQX96 The price after removing the output amount of token0 or token1\n  function getNextSqrtPriceFromOutput(\n    uint160 sqrtPX96,\n    uint128 liquidity,\n    uint256 amountOut,\n    bool zeroForOne\n  ) internal pure returns (uint160 sqrtQX96) {\n    require(sqrtPX96 > 0);\n    require(liquidity > 0);\n\n    // round to make sure that we pass the target price\n    return\n      zeroForOne\n        ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\n        : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\n  }\n\n  /// @notice Gets the amount0 delta between two prices\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\n  /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\n  /// @param sqrtRatioAX96 A sqrt price\n  /// @param sqrtRatioBX96 Another sqrt price\n  /// @param liquidity The amount of usable liquidity\n  /// @param roundUp Whether to round the amount up or down\n  /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\n  function getAmount0Delta(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity,\n    bool roundUp\n  ) internal pure returns (uint256 amount0) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\n    uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\n\n    require(sqrtRatioAX96 > 0);\n\n    return\n      roundUp\n        ? UnsafeMath.divRoundingUp(\n          FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\n          sqrtRatioAX96\n        )\n        : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\n  }\n\n  /// @notice Gets the amount1 delta between two prices\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\n  /// @param sqrtRatioAX96 A sqrt price\n  /// @param sqrtRatioBX96 Another sqrt price\n  /// @param liquidity The amount of usable liquidity\n  /// @param roundUp Whether to round the amount up, or down\n  /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\n  function getAmount1Delta(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    uint128 liquidity,\n    bool roundUp\n  ) internal pure returns (uint256 amount1) {\n    if (sqrtRatioAX96 > sqrtRatioBX96)\n      (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n    return\n      roundUp\n        ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\n        : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\n  }\n\n  /// @notice Helper that gets signed token0 delta\n  /// @param sqrtRatioAX96 A sqrt price\n  /// @param sqrtRatioBX96 Another sqrt price\n  /// @param liquidity The change in liquidity for which to compute the amount0 delta\n  /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\n  function getAmount0Delta(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    int128 liquidity\n  ) internal pure returns (int256 amount0) {\n    return\n      liquidity < 0\n        ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n        : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n  }\n\n  /// @notice Helper that gets signed token1 delta\n  /// @param sqrtRatioAX96 A sqrt price\n  /// @param sqrtRatioBX96 Another sqrt price\n  /// @param liquidity The change in liquidity for which to compute the amount1 delta\n  /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\n  function getAmount1Delta(\n    uint160 sqrtRatioAX96,\n    uint160 sqrtRatioBX96,\n    int128 liquidity\n  ) internal pure returns (int256 amount1) {\n    return\n      liquidity < 0\n        ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\n        : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/SwapMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.9;\n\nimport \"./FullMath.sol\";\nimport \"./SqrtPriceMath.sol\";\n\n/// @title Computes the result of a swap within ticks\n/// @notice Contains methods for computing the result of a swap within a single tick price range, i.e., a single tick.\nlibrary SwapMath {\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\n  /// @param sqrtRatioCurrentX96 The current sqrt price of the pool\n  /// @param sqrtRatioTargetX96 The price that cannot be exceeded, from which the direction of the swap is inferred\n  /// @param liquidity The usable liquidity\n  /// @param amountRemaining How much input or output amount is remaining to be swapped in/out\n  /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\n  /// @return sqrtRatioNextX96 The price after swapping the amount in/out, not to exceed the price target\n  /// @return amountIn The amount to be swapped in, of either token0 or token1, based on the direction of the swap\n  /// @return amountOut The amount to be received, of either token0 or token1, based on the direction of the swap\n  /// @return feeAmount The amount of input that will be taken as a fee\n  function computeSwapStep(\n    uint160 sqrtRatioCurrentX96,\n    uint160 sqrtRatioTargetX96,\n    uint128 liquidity,\n    int256 amountRemaining,\n    uint24 feePips\n  )\n    internal\n    pure\n    returns (uint160 sqrtRatioNextX96, uint256 amountIn, uint256 amountOut, uint256 feeAmount)\n  {\n    bool zeroForOne = sqrtRatioCurrentX96 >= sqrtRatioTargetX96;\n    bool exactIn = amountRemaining >= 0;\n\n    if (exactIn) {\n      uint256 amountRemainingLessFee = FullMath.mulDiv(\n        uint256(amountRemaining),\n        1e6 - feePips,\n        1e6\n      );\n      amountIn = zeroForOne\n        ? SqrtPriceMath.getAmount0Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, true)\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, true);\n      if (amountRemainingLessFee >= amountIn) sqrtRatioNextX96 = sqrtRatioTargetX96;\n      else\n        sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromInput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          amountRemainingLessFee,\n          zeroForOne\n        );\n    } else {\n      amountOut = zeroForOne\n        ? SqrtPriceMath.getAmount1Delta(sqrtRatioTargetX96, sqrtRatioCurrentX96, liquidity, false)\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioTargetX96, liquidity, false);\n      if (uint256(-amountRemaining) >= amountOut) sqrtRatioNextX96 = sqrtRatioTargetX96;\n      else\n        sqrtRatioNextX96 = SqrtPriceMath.getNextSqrtPriceFromOutput(\n          sqrtRatioCurrentX96,\n          liquidity,\n          uint256(-amountRemaining),\n          zeroForOne\n        );\n    }\n\n    bool max = sqrtRatioTargetX96 == sqrtRatioNextX96;\n\n    // get the input/output amounts\n    if (zeroForOne) {\n      amountIn = max && exactIn\n        ? amountIn\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, true);\n      amountOut = max && !exactIn\n        ? amountOut\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioNextX96, sqrtRatioCurrentX96, liquidity, false);\n    } else {\n      amountIn = max && exactIn\n        ? amountIn\n        : SqrtPriceMath.getAmount1Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, true);\n      amountOut = max && !exactIn\n        ? amountOut\n        : SqrtPriceMath.getAmount0Delta(sqrtRatioCurrentX96, sqrtRatioNextX96, liquidity, false);\n    }\n\n    // cap the output amount to not exceed the remaining output amount\n    if (!exactIn && amountOut > uint256(-amountRemaining)) {\n      amountOut = uint256(-amountRemaining);\n    }\n\n    if (exactIn && sqrtRatioNextX96 != sqrtRatioTargetX96) {\n      // we didn't reach the target, so take the remainder of the maximum input as fee\n      feeAmount = uint256(amountRemaining) - amountIn;\n    } else {\n      feeAmount = FullMath.mulDivRoundingUp(amountIn, feePips, 1e6 - feePips);\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/Tick.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.9;\n\nimport \"./LowGasSafeMath.sol\";\nimport \"./SafeCast.sol\";\n\nimport \"./TickMath.sol\";\nimport \"./LiquidityMath.sol\";\n\n/// @title Tick\n/// @notice Contains functions for managing tick processes and relevant calculations\nlibrary Tick {\n  using LowGasSafeMath for int256;\n  using SafeCast for int256;\n\n  // info stored for each initialized individual tick\n  struct Info {\n    // the total position liquidity that references this tick\n    uint128 liquidityGross;\n    // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\n    int128 liquidityNet;\n    // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\n    uint256 feeGrowthOutside0X128;\n    uint256 feeGrowthOutside1X128;\n    // the cumulative tick value on the other side of the tick\n    int56 tickCumulativeOutside;\n    // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\n    uint160 secondsPerLiquidityOutsideX128;\n    // the seconds spent on the other side of the tick (relative to the current tick)\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\n    uint32 secondsOutside;\n    // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\n    // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\n    bool initialized;\n  }\n\n  /// @notice Derives max liquidity per tick from given tick spacing\n  /// @dev Executed within the pool constructor\n  /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\n  ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\n  /// @return The max liquidity per tick\n  function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing) internal pure returns (uint128) {\n    int24 minTick = (TickMath.MIN_TICK / tickSpacing) * tickSpacing;\n    int24 maxTick = (TickMath.MAX_TICK / tickSpacing) * tickSpacing;\n    uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\n    return type(uint128).max / numTicks;\n  }\n\n  /// @notice Retrieves fee growth data\n  /// @param self The mapping containing all tick information for initialized ticks\n  /// @param tickLower The lower tick boundary of the position\n  /// @param tickUpper The upper tick boundary of the position\n  /// @param tickCurrent The current tick\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n  /// @return feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\n  /// @return feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\n  function getFeeGrowthInside(\n    mapping(int24 => Tick.Info) storage self,\n    int24 tickLower,\n    int24 tickUpper,\n    int24 tickCurrent,\n    uint256 feeGrowthGlobal0X128,\n    uint256 feeGrowthGlobal1X128\n  ) internal view returns (uint256 feeGrowthInside0X128, uint256 feeGrowthInside1X128) {\n    Info storage lower = self[tickLower];\n    Info storage upper = self[tickUpper];\n\n    // calculate fee growth below\n    uint256 feeGrowthBelow0X128;\n    uint256 feeGrowthBelow1X128;\n    if (tickCurrent >= tickLower) {\n      feeGrowthBelow0X128 = lower.feeGrowthOutside0X128;\n      feeGrowthBelow1X128 = lower.feeGrowthOutside1X128;\n    } else {\n      feeGrowthBelow0X128 = feeGrowthGlobal0X128 - lower.feeGrowthOutside0X128;\n      feeGrowthBelow1X128 = feeGrowthGlobal1X128 - lower.feeGrowthOutside1X128;\n    }\n\n    // calculate fee growth above\n    uint256 feeGrowthAbove0X128;\n    uint256 feeGrowthAbove1X128;\n    if (tickCurrent < tickUpper) {\n      feeGrowthAbove0X128 = upper.feeGrowthOutside0X128;\n      feeGrowthAbove1X128 = upper.feeGrowthOutside1X128;\n    } else {\n      feeGrowthAbove0X128 = feeGrowthGlobal0X128 - upper.feeGrowthOutside0X128;\n      feeGrowthAbove1X128 = feeGrowthGlobal1X128 - upper.feeGrowthOutside1X128;\n    }\n\n    feeGrowthInside0X128 = feeGrowthGlobal0X128 - feeGrowthBelow0X128 - feeGrowthAbove0X128;\n    feeGrowthInside1X128 = feeGrowthGlobal1X128 - feeGrowthBelow1X128 - feeGrowthAbove1X128;\n  }\n\n  /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\n  /// @param self The mapping containing all tick information for initialized ticks\n  /// @param tick The tick that will be updated\n  /// @param tickCurrent The current tick\n  /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n  /// @param secondsPerLiquidityCumulativeX128 The all-time seconds per max(1, liquidity) of the pool\n  /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n  /// @param time The current block timestamp cast to a uint32\n  /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\n  /// @param maxLiquidity The maximum liquidity allocation for a single tick\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\n  function update(\n    mapping(int24 => Tick.Info) storage self,\n    int24 tick,\n    int24 tickCurrent,\n    int128 liquidityDelta,\n    uint256 feeGrowthGlobal0X128,\n    uint256 feeGrowthGlobal1X128,\n    uint160 secondsPerLiquidityCumulativeX128,\n    int56 tickCumulative,\n    uint32 time,\n    bool upper,\n    uint128 maxLiquidity\n  ) internal returns (bool flipped) {\n    Tick.Info storage info = self[tick];\n\n    uint128 liquidityGrossBefore = info.liquidityGross;\n    uint128 liquidityGrossAfter = LiquidityMath.addDelta(liquidityGrossBefore, liquidityDelta);\n\n    require(liquidityGrossAfter <= maxLiquidity, \"LO\");\n\n    flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\n\n    if (liquidityGrossBefore == 0) {\n      // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\n      if (tick <= tickCurrent) {\n        info.feeGrowthOutside0X128 = feeGrowthGlobal0X128;\n        info.feeGrowthOutside1X128 = feeGrowthGlobal1X128;\n        info.secondsPerLiquidityOutsideX128 = secondsPerLiquidityCumulativeX128;\n        info.tickCumulativeOutside = tickCumulative;\n        info.secondsOutside = time;\n      }\n      info.initialized = true;\n    }\n\n    info.liquidityGross = liquidityGrossAfter;\n\n    // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\n    info.liquidityNet = upper\n      ? int256(info.liquidityNet).sub(liquidityDelta).toInt128()\n      : int256(info.liquidityNet).add(liquidityDelta).toInt128();\n  }\n\n  /// @notice Clears tick data\n  /// @param self The mapping containing all initialized tick information for initialized ticks\n  /// @param tick The tick that will be cleared\n  function clear(mapping(int24 => Tick.Info) storage self, int24 tick) internal {\n    delete self[tick];\n  }\n\n  /// @notice Transitions to next tick as needed by price movement\n  /// @param self The mapping containing all tick information for initialized ticks\n  /// @param tick The destination tick of the transition\n  /// @param feeGrowthGlobal0X128 The all-time global fee growth, per unit of liquidity, in token0\n  /// @param feeGrowthGlobal1X128 The all-time global fee growth, per unit of liquidity, in token1\n  /// @param secondsPerLiquidityCumulativeX128 The current seconds per liquidity\n  /// @param tickCumulative The tick * time elapsed since the pool was first initialized\n  /// @param time The current block.timestamp\n  /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\n  function cross(\n    mapping(int24 => Tick.Info) storage self,\n    int24 tick,\n    uint256 feeGrowthGlobal0X128,\n    uint256 feeGrowthGlobal1X128,\n    uint160 secondsPerLiquidityCumulativeX128,\n    int56 tickCumulative,\n    uint32 time\n  ) internal returns (int128 liquidityNet) {\n    Tick.Info storage info = self[tick];\n    info.feeGrowthOutside0X128 = feeGrowthGlobal0X128 - info.feeGrowthOutside0X128;\n    info.feeGrowthOutside1X128 = feeGrowthGlobal1X128 - info.feeGrowthOutside1X128;\n    info.secondsPerLiquidityOutsideX128 =\n      secondsPerLiquidityCumulativeX128 -\n      info.secondsPerLiquidityOutsideX128;\n    info.tickCumulativeOutside = tickCumulative - info.tickCumulativeOutside;\n    info.secondsOutside = time - info.secondsOutside;\n    liquidityNet = info.liquidityNet;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/TickBitmap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.9;\n\nimport \"./BitMath.sol\";\n\n/// @title Packed tick initialized state library\n/// @notice Stores a packed mapping of tick index to its initialized state\n/// @dev The mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\nlibrary TickBitmap {\n  /// @notice Computes the position in the mapping where the initialized bit for a tick lives\n  /// @param tick The tick for which to compute the position\n  /// @return wordPos The key in the mapping containing the word in which the bit is stored\n  /// @return bitPos The bit position in the word where the flag is stored\n  function position(int24 tick) private pure returns (int16 wordPos, uint8 bitPos) {\n    wordPos = int16(tick >> 8);\n    bitPos = uint8(uint24(tick % 256));\n  }\n\n  /// @notice Flips the initialized state for a given tick from false to true, or vice versa\n  /// @param self The mapping in which to flip the tick\n  /// @param tick The tick to flip\n  /// @param tickSpacing The spacing between usable ticks\n  function flipTick(\n    mapping(int16 => uint256) storage self,\n    int24 tick,\n    int24 tickSpacing\n  ) internal {\n    require(tick % tickSpacing == 0); // ensure that the tick is spaced\n    (int16 wordPos, uint8 bitPos) = position(tick / tickSpacing);\n    uint256 mask = 1 << bitPos;\n    self[wordPos] ^= mask;\n  }\n\n  /// @notice Returns the next initialized tick contained in the same word (or adjacent word) as the tick that is either\n  /// to the left (less than or equal to) or right (greater than) of the given tick\n  /// @param self The mapping in which to compute the next initialized tick\n  /// @param tick The starting tick\n  /// @param tickSpacing The spacing between usable ticks\n  /// @param lte Whether to search for the next initialized tick to the left (less than or equal to the starting tick)\n  /// @return next The next initialized or uninitialized tick up to 256 ticks away from the current tick\n  /// @return initialized Whether the next tick is initialized, as the function only searches within up to 256 ticks\n  function nextInitializedTickWithinOneWord(\n    mapping(int16 => uint256) storage self,\n    int24 tick,\n    int24 tickSpacing,\n    bool lte\n  ) internal view returns (int24 next, bool initialized) {\n    int24 compressed = tick / tickSpacing;\n    if (tick < 0 && tick % tickSpacing != 0) compressed--; // round towards negative infinity\n\n    if (lte) {\n      (int16 wordPos, uint8 bitPos) = position(compressed);\n      // all the 1s at or to the right of the current bitPos\n      uint256 mask = (1 << bitPos) - 1 + (1 << bitPos);\n      uint256 masked = self[wordPos] & mask;\n\n      // if there are no initialized ticks to the right of or at the current tick, return rightmost in the word\n      initialized = masked != 0;\n      // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n      next = initialized\n        ? (compressed - int24(int8(bitPos - BitMath.mostSignificantBit(masked)))) * tickSpacing\n        : (compressed - int24(int8(bitPos))) * tickSpacing;\n    } else {\n      // start from the word of the next tick, since the current tick state doesn't matter\n      (int16 wordPos, uint8 bitPos) = position(compressed + 1);\n      // all the 1s at or to the left of the bitPos\n      uint256 mask = ~((1 << bitPos) - 1);\n      uint256 masked = self[wordPos] & mask;\n\n      // if there are no initialized ticks to the left of the current tick, return leftmost in the word\n      initialized = masked != 0;\n      // overflow/underflow is possible, but prevented externally by limiting both tickSpacing and tick\n      next = initialized\n        ? (compressed + 1 + int24(int8(BitMath.leastSignificantBit(masked) - bitPos))) * tickSpacing\n        : (compressed + 1 + int24(int8(type(uint8).max - bitPos))) * tickSpacing;\n    }\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n  int24 internal constant MIN_TICK = -887272;\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n  int24 internal constant MAX_TICK = -MIN_TICK;\n\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\n  /// @dev Throws if |tick| > max tick\n  /// @param tick The input tick for the above formula\n  /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n  /// at the given tick\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n    uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n    require(absTick <= uint256(uint24(MAX_TICK)), \"T\");\n\n    uint256 ratio = absTick & 0x1 != 0\n      ? 0xfffcb933bd6fad37aa2d162d1a594001\n      : 0x100000000000000000000000000000000;\n    if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n    if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n    if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n    if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n    if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n    if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n    if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n    if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n    if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n    if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n    if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n    if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n    if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n    if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n    if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n    if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n    if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n    if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n    if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n    if (tick > 0) ratio = type(uint256).max / ratio;\n\n    // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n    // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n    // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n    sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n  }\n\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n  /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n  /// ever return.\n  /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n  function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n    // second inequality must be < because the price can never reach the price at the max tick\n    require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \"R\");\n    uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n    uint256 r = ratio;\n    uint256 msb = 0;\n\n    assembly {\n      let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(5, gt(r, 0xFFFFFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(4, gt(r, 0xFFFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(3, gt(r, 0xFF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(2, gt(r, 0xF))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := shl(1, gt(r, 0x3))\n      msb := or(msb, f)\n      r := shr(f, r)\n    }\n    assembly {\n      let f := gt(r, 0x1)\n      msb := or(msb, f)\n    }\n\n    if (msb >= 128) r = ratio >> (msb - 127);\n    else r = ratio << (127 - msb);\n\n    int256 log_2 = (int256(msb) - 128) << 64;\n\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(63, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(62, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(61, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(60, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(59, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(58, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(57, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(56, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(55, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(54, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(53, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(52, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(51, f))\n      r := shr(f, r)\n    }\n    assembly {\n      r := shr(127, mul(r, r))\n      let f := shr(128, r)\n      log_2 := or(log_2, shl(50, f))\n    }\n\n    int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n    int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n    int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n    tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\n      ? tickHi\n      : tickLow;\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary TransferHelper {\n  /// @notice Transfers tokens from the targeted address to the given destination\n  /// @notice Errors with 'STF' if transfer fails\n  /// @param token The contract address of the token to be transferred\n  /// @param from The originating address from which the tokens will be transferred\n  /// @param to The destination address of the transfer\n  /// @param value The amount to be transferred\n  function safeTransferFrom(address token, address from, address to, uint256 value) internal {\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value)\n    );\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"STF\");\n  }\n\n  /// @notice Transfers tokens from msg.sender to a recipient\n  /// @dev Errors with ST if transfer fails\n  /// @param token The contract address of the token which will be transferred\n  /// @param to The recipient of the transfer\n  /// @param value The value of the transfer\n  function safeTransfer(address token, address to, uint256 value) internal {\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(IERC20.transfer.selector, to, value)\n    );\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\n  }\n\n  /// @notice Approves the stipulated contract to spend the given allowance in the given token\n  /// @dev Errors with 'SA' if transfer fails\n  /// @param token The contract address of the token to be approved\n  /// @param to The target of the approval\n  /// @param value The amount of the given token the target will be allowed to spend\n  function safeApprove(address token, address to, uint256 value) internal {\n    (bool success, bytes memory data) = token.call(\n      abi.encodeWithSelector(IERC20.approve.selector, to, value)\n    );\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \"SA\");\n  }\n\n  /// @notice Transfers ETH to the recipient address\n  /// @dev Fails with `STE`\n  /// @param to The destination of the transfer\n  /// @param value The value to be transferred\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{value: value}(new bytes(0));\n    require(success, \"STE\");\n  }\n}\n"
    },
    "contracts/uniswap-contracts/libraries/UnsafeMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\n/// @title Math functions that do not check inputs or outputs\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\nlibrary UnsafeMath {\n  /// @notice Returns ceil(x / y)\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\n  /// @param x The dividend\n  /// @param y The divisor\n  /// @return z The quotient, ceil(x / y)\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\n    assembly {\n      z := add(div(x, y), gt(mod(x, y), 0))\n    }\n  }\n}\n"
    },
    "contracts/utils/CILAirdrop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/// @notice CIL Airdrop contract, each og can claim 7.1% of total amount.  (https://docs.cilistia.com/cil#tokenomics)\ncontract CILAirdrop is Ownable {\n  using SafeERC20 for IERC20;\n\n  /// @notice cil token addresses\n  address public immutable CIL;\n\n  /// @notice signer address\n  address public immutable signer;\n\n  /// @notice airdrop datas\n  uint32 public openingTime;\n  uint32 public closingTime;\n  uint32 public ogNumber;\n  uint256 public claimAmountPerWallet;\n\n  /// @notice address => claimed timestamp\n  mapping(address => uint256) public lastClaimedTime;\n\n  struct Sig {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  /// @notice fires when set period\n  event SetPeriod(uint32 openingTime, uint32 closingTime);\n\n  /// @notice fires when claimed\n  event Claimed(address to, uint256 amount);\n\n  /**\n   * @param signer_ signer address\n   * @param CIL_ cil token address\n   */\n  constructor(address signer_, address CIL_) {\n    require(signer_ != address(0), \"CILAirdrop: invalid signer address\");\n    require(CIL_ != address(0), \"CILAirdrop: invalid CIL address\");\n    signer = signer_;\n    CIL = CIL_;\n  }\n\n  /**\n   * @dev returns airdrop state\n   * @return bool returns true if airdrop is live\n   */\n  function isOpen() public view returns (bool) {\n    return block.timestamp >= openingTime && block.timestamp < closingTime;\n  }\n\n  /**\n   * @dev validates buy function variables\n   * @return isValid ture -> valid, false -> invalid\n   */\n  function _isClaimParamValid(Sig calldata sig) private view returns (bool) {\n    bytes32 messageHash = keccak256(abi.encodePacked(_msgSender()));\n\n    bytes32 ethSignedMessageHash = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash)\n    );\n\n    return signer == ecrecover(ethSignedMessageHash, sig.v, sig.r, sig.s);\n  }\n\n  /**\n   * @dev claim cil token\n   * @param sig signature of signer\n   * @return result return claimed cil token amount\n   */\n  function claim(Sig calldata sig) external returns (uint256 result) {\n    require(isOpen(), \"CILAirdrop: not open now\");\n    require(_isClaimParamValid(sig), \"CILAirdrop: invalid signature\");\n    require(\n      lastClaimedTime[_msgSender()] + 1 days <= block.timestamp,\n      \"CILAirdrop: already claimed today\"\n    );\n\n    uint256 tokenAmount = claimAmountPerWallet;\n\n    lastClaimedTime[_msgSender()] = block.timestamp;\n    IERC20(CIL).safeTransfer(_msgSender(), tokenAmount);\n\n    emit Claimed(_msgSender(), tokenAmount);\n    return tokenAmount;\n  }\n\n  /**\n   * @dev return balance of cil token\n   * @return amount amount of cil token\n   */\n  function balance() public view returns (uint256) {\n    return IERC20(CIL).balanceOf(address(this));\n  }\n\n  /**\n   * @dev set airdrop settings\n   * @param openingTime_ opening time of airdrop\n   * @param closingTime_ closing time of airdrop\n   * @param ogNumber_ number of og member\n   */\n  function setPeriod(\n    uint32 openingTime_,\n    uint32 closingTime_,\n    uint32 ogNumber_\n  ) external onlyOwner {\n    // require(!isOpen(), \"CILAirdrop: already opened\");\n    require(closingTime_ > openingTime_, \"CILAirdrop: invalid time window\");\n    openingTime = openingTime_;\n    closingTime = closingTime_;\n    ogNumber = ogNumber_;\n    claimAmountPerWallet = balance() / ogNumber_ / 14; // 14 days of airdrop duration\n\n    emit SetPeriod(openingTime, closingTime);\n  }\n\n  /**\n   * @dev withdraw all CIL to another address\n   * @param recipient_ address to withdraw cil token\n   */\n  function withdraw(address recipient_) external onlyOwner {\n    uint256 _balance = balance();\n    IERC20(CIL).safeTransfer(recipient_, _balance);\n  }\n}\n"
    },
    "contracts/utils/CILPreSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/// @notice Cilistia preSale contract address. (https://docs.cilistia.com/cil#tokenomics)\ncontract CILPreSale is Ownable {\n  using SafeERC20 for IERC20;\n\n  /// @notice stable coin addresses\n  address public immutable USDT;\n  address public immutable USDC;\n\n  /// @notice cil token address\n  address public immutable CIL;\n\n  /// @notice multiSig wallet address\n  address public immutable multiSig1;\n  /// @notice multiSig wallet address\n  address public immutable multiSig2;\n  /// @notice multiSig wallet address\n  address public immutable multiSig3;\n\n  /// @notice signer address\n  address public immutable signer;\n\n  /// @notice price per CIL\n  uint256 public pricePerCIL = 500;\n\n  /// @notice preSale period\n  uint32 public openingTime;\n  uint32 public closingTime;\n\n  struct Sig {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n  }\n\n  /// @notice fires when buy CIL token\n  event Buy(\n    address indexed _executor,\n    string indexed _tokenNameToDeposit,\n    uint256 _deposit,\n    uint256 _withdraw\n  );\n\n  /// @notice fires when set preSale period\n  event SetPeriod(uint32 openingTime, uint32 closingTime);\n\n  /// @notice fires when change price\n  event PriceChanged(uint256 price);\n\n  /**\n   * @param signer_ signer address\n   * @param multiSig1_ multi sign address\n   * @param multiSig2_ multi sign address\n   * @param USDT_ usdt address\n   * @param USDC_ usdc address\n   * @param CIL_ cil token address\n   */\n  constructor(\n    address signer_,\n    address multiSig1_,\n    address multiSig2_,\n    address multiSig3_,\n    address USDT_,\n    address USDC_,\n    address CIL_\n  ) {\n    require(signer_ != address(0), \"CILPreSale: invalid signer address\");\n    require(multiSig1_ != address(0), \"CILPreSale: invalid multiSig address\");\n    require(multiSig2_ != address(0), \"CILPreSale: invalid multiSig address\");\n    require(multiSig3_ != address(0), \"CILPreSale: invalid multiSig address\");\n    require(USDT_ != address(0), \"CILPreSale: invalid USDT address\");\n    require(USDC_ != address(0), \"CILPreSale: invalid USDC address\");\n    require(CIL_ != address(0), \"CILPreSale: invalid CIL address\");\n    signer = signer_;\n    multiSig1 = multiSig1_;\n    multiSig2 = multiSig2_;\n    multiSig3 = multiSig3_;\n    USDT = USDT_;\n    USDC = USDC_;\n    CIL = CIL_;\n  }\n\n  /**\n   * @dev returns airdrop state\n   * @return bool returns true if airdrop is live\n   */\n  function isOpen() public view returns (bool) {\n    return block.timestamp >= openingTime && block.timestamp < closingTime;\n  }\n\n  /**\n   * @dev validates buy function variables\n   * @param amountToDeposit_ deposit token amount\n   * @param tokenNameToDeposit_ token name to deposit\n   * @param sig_ signature of backend wallet\n   * @return isValid ture -> valid, false -> invalid\n   */\n  function _isBuyParamValid(\n    uint256 amountToDeposit_,\n    string memory tokenNameToDeposit_,\n    Sig calldata sig_\n  ) private view returns (bool) {\n    bytes32 messageHash = keccak256(\n      abi.encodePacked(_msgSender(), amountToDeposit_, tokenNameToDeposit_)\n    );\n\n    bytes32 ethSignedMessageHash = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", messageHash)\n    );\n\n    return signer == ecrecover(ethSignedMessageHash, sig_.v, sig_.r, sig_.s);\n  }\n\n  /**\n   * @dev buy cil token with stable coins such as usdt, usdc\n   * @param amountToDeposit_ deposit token amount\n   * @param tokenNameToDeposit_ token name to deposit\n   * @param sig_ signature of backend wallet\n   * @return result bought cil token amount\n   */\n  function buy(\n    uint256 amountToDeposit_,\n    string memory tokenNameToDeposit_,\n    Sig calldata sig_\n  ) external returns (uint256 result) {\n    require(isOpen(), \"CILPreSale: not open now\");\n    require(\n      _isBuyParamValid(amountToDeposit_, tokenNameToDeposit_, sig_),\n      \"CILPreSale: invalid signature\"\n    );\n\n    address tokenToDeposit;\n\n    if (keccak256(abi.encodePacked(tokenNameToDeposit_)) == keccak256(abi.encodePacked(\"USDT\")))\n      tokenToDeposit = USDT;\n    else if (\n      keccak256(abi.encodePacked(tokenNameToDeposit_)) == keccak256(abi.encodePacked(\"USDC\"))\n    ) tokenToDeposit = USDC;\n    else revert(\"CILPreSale: incorrect deposit token\");\n\n    uint256 tokenDecimalToDeposit = IERC20Metadata(tokenToDeposit).decimals();\n    uint256 multiplier = IERC20Metadata(CIL).decimals() - tokenDecimalToDeposit;\n    uint256 currentAmountInUSD = (IERC20(CIL).balanceOf(_msgSender()) * pricePerCIL) /\n      100 /\n      (10 ** multiplier);\n\n    require(\n      amountToDeposit_ + currentAmountInUSD <= 1000 * (10 ** tokenDecimalToDeposit),\n      \"CILPreSale: max deposit amount is $1000 per wallet\"\n    );\n\n    uint256 _balance = balance();\n    uint256 amountWithdrawalCIL = (amountToDeposit_ * (10 ** multiplier) * 100) / pricePerCIL;\n    require(amountWithdrawalCIL <= _balance, \"CILPreSale: insufficient withdrawal amount\");\n    require(\n      IERC20(tokenToDeposit).balanceOf(_msgSender()) >= amountToDeposit_,\n      \"CILPreSale: insufficient deposit balance\"\n    );\n\n    uint256 amount1 = (amountToDeposit_ * 7) / 10;\n    uint256 amount3 = amountToDeposit_ / 10;\n    uint256 amount2 = amountToDeposit_ - amount1 - amount3;\n\n    IERC20(tokenToDeposit).safeTransferFrom(_msgSender(), multiSig1, amount1);\n    IERC20(tokenToDeposit).safeTransferFrom(_msgSender(), multiSig2, amount2);\n    IERC20(tokenToDeposit).safeTransferFrom(_msgSender(), multiSig3, amount3);\n\n    IERC20(CIL).safeTransfer(_msgSender(), amountWithdrawalCIL);\n\n    emit Buy(_msgSender(), tokenNameToDeposit_, amountToDeposit_, amountWithdrawalCIL);\n\n    return amountWithdrawalCIL;\n  }\n\n  /**\n   * @dev return balance of cil token\n   * @return amount amount of cil token\n   */\n  function balance() public view returns (uint256) {\n    return IERC20(CIL).balanceOf(address(this));\n  }\n\n  /**\n   * @dev set preSale settings\n   * @param openingTime_ opening time of airdrop\n   * @param closingTime_ closing time of airdrop\n   */\n  function setPeriod(uint32 openingTime_, uint32 closingTime_) external onlyOwner {\n    // require(!isOpen(), \"CILPreSale: already opened\");\n    require(closingTime_ > openingTime_, \"CILPreSale: invalid time window\");\n    openingTime = openingTime_;\n    closingTime = closingTime_;\n\n    emit SetPeriod(openingTime, closingTime);\n  }\n\n  /**\n   * @dev withdraw all CIL to another address\n   * @param recipient_ address to withdraw cil token\n   */\n  function withdraw(address recipient_) external onlyOwner {\n    uint256 _balance = balance();\n    IERC20(CIL).safeTransfer(recipient_, _balance);\n  }\n\n  /**\n   * @dev renounce price of CIL ($ per CIL)\n   * @param priceCIL_ price of the cil token\n   */\n  function renouncePrice(uint256 priceCIL_) external onlyOwner {\n    require(priceCIL_ > 0, \"CILPreSale: price must be greater than zero\");\n    pricePerCIL = priceCIL_;\n\n    emit PriceChanged(priceCIL_);\n  }\n}\n"
    },
    "contracts/utils/LiquidityExtension.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.9;\n\nimport {IUniswapV3Pool} from \"../uniswap-contracts/interfaces/IUniswapV3Pool.sol\";\nimport {TickMath} from \"../uniswap-contracts/libraries/TickMath.sol\";\nimport {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport {TransferHelper} from \"../uniswap-contracts/libraries/TransferHelper.sol\";\nimport {INonfungiblePositionManager} from \"../uniswap-contracts/interfaces/INonfungiblePositionManager.sol\";\n\ncontract LiquidityExtension is IERC721Receiver {\n  address public immutable CIL;\n  address public immutable WETH;\n\n  uint24 public constant poolFee = 3000;\n\n  INonfungiblePositionManager public immutable nonfungiblePositionManager;\n\n  /// @notice Represents the deposit of an NFT\n  struct Deposit {\n    address owner;\n    uint128 liquidity;\n    address token0;\n    address token1;\n  }\n\n  /// @dev deposits[tokenId] => Deposit\n  mapping(uint256 => Deposit) public deposits;\n\n  constructor(INonfungiblePositionManager _nonfungiblePositionManager, address cil) {\n    nonfungiblePositionManager = _nonfungiblePositionManager;\n    CIL = cil;\n    WETH = nonfungiblePositionManager.WETH9();\n  }\n\n  // Implementing `onERC721Received` so this contract can receive custody of erc721 tokens\n  function onERC721Received(\n    address operator,\n    address,\n    uint256 tokenId,\n    bytes calldata\n  ) external override returns (bytes4) {\n    // get position information\n\n    _createDeposit(operator, tokenId);\n\n    return this.onERC721Received.selector;\n  }\n\n  function _createDeposit(address owner, uint256 tokenId) internal {\n    (\n      ,\n      ,\n      address token0,\n      address token1,\n      ,\n      ,\n      ,\n      uint128 liquidity,\n      ,\n      ,\n      ,\n\n    ) = nonfungiblePositionManager.positions(tokenId);\n\n    // set the owner and data for position\n    // operator is msg.sender\n    deposits[tokenId] = Deposit({\n      owner: owner,\n      liquidity: liquidity,\n      token0: token0,\n      token1: token1\n    });\n  }\n\n  /**\n   * @notice Calls the mint function defined in periphery\n   * @param amountCILToMint The amount of token0 to deposit\n   * @param amountWETHToMint The amount of token1 to deposit\n   * @return tokenId The id of the newly minted ERC721\n   * @return liquidity The amount of liquidity for the position\n   * @return cilAmount The amount of token0\n   * @return wethAmount The amount of token1\n   */\n  function mintNewPosition(\n    uint256 amountCILToMint,\n    uint256 amountWETHToMint\n  ) external returns (uint256 tokenId, uint128 liquidity, uint256 cilAmount, uint256 wethAmount) {\n    bool isFirst = WETH > CIL;\n\n    // transfer tokens to contract\n    TransferHelper.safeTransferFrom(CIL, msg.sender, address(this), amountCILToMint);\n    TransferHelper.safeTransferFrom(WETH, msg.sender, address(this), amountWETHToMint);\n\n    // Approve the position manager\n    TransferHelper.safeApprove(CIL, address(nonfungiblePositionManager), amountCILToMint);\n    TransferHelper.safeApprove(WETH, address(nonfungiblePositionManager), amountWETHToMint);\n\n    int24 maxTicks = (TickMath.MAX_TICK / 60) * 60;\n\n    INonfungiblePositionManager.MintParams memory params = INonfungiblePositionManager.MintParams({\n      token0: isFirst ? CIL : WETH,\n      token1: isFirst ? WETH : CIL,\n      fee: poolFee,\n      tickLower: -1 * maxTicks,\n      tickUpper: maxTicks,\n      amount0Desired: isFirst ? amountCILToMint : amountWETHToMint,\n      amount1Desired: isFirst ? amountWETHToMint : amountCILToMint,\n      amount0Min: 0,\n      amount1Min: 0,\n      recipient: address(this),\n      deadline: block.timestamp\n    });\n\n    uint256 amount0;\n    uint256 amount1;\n    // Note that the pool defined by CIL/WETH and fee tier 0.3% must already be created and initialized in order to mint\n    (tokenId, liquidity, amount0, amount1) = nonfungiblePositionManager.mint(params);\n\n    // Create a deposit\n    _createDeposit(msg.sender, tokenId);\n\n    cilAmount = isFirst ? amount0 : amount1;\n    wethAmount = isFirst ? amount1 : amount0;\n\n    // Remove allowance and refund in both assets.\n    if (cilAmount < amountCILToMint) {\n      TransferHelper.safeApprove(CIL, address(nonfungiblePositionManager), 0);\n      uint256 refund0 = amountCILToMint - cilAmount;\n      TransferHelper.safeTransfer(CIL, msg.sender, refund0);\n    }\n\n    if (wethAmount < amountWETHToMint) {\n      TransferHelper.safeApprove(WETH, address(nonfungiblePositionManager), 0);\n      uint256 refund1 = amountWETHToMint - wethAmount;\n      TransferHelper.safeTransfer(WETH, msg.sender, refund1);\n    }\n  }\n\n  /**\n   * @notice Collects the fees associated with provided liquidity\n   * @dev The contract must hold the erc721 token before it can collect fees\n   * @param tokenId The id of the erc721 token\n   * @return amount0 The amount of fees collected in token0\n   * @return amount1 The amount of fees collected in token1\n   */\n  function collectAllFees(uint256 tokenId) public returns (uint256 amount0, uint256 amount1) {\n    // Caller must own the ERC721 position, meaning it must be a deposit\n\n    // set amount0Max and amount1Max to uint256.max to collect all fees\n    // alternatively can set recipient to msg.sender and avoid another transaction in `sendToOwner`\n    INonfungiblePositionManager.CollectParams memory params = INonfungiblePositionManager\n      .CollectParams({\n        tokenId: tokenId,\n        recipient: address(this),\n        amount0Max: type(uint128).max,\n        amount1Max: type(uint128).max\n      });\n\n    (amount0, amount1) = nonfungiblePositionManager.collect(params);\n\n    // send collected feed back to owner\n    _sendToOwner(tokenId, amount0, amount1);\n  }\n\n  /**\n   * @notice A function that decreases the current liquidity by half. An example to show how to call the `decreaseLiquidity` function defined in periphery.\n   * @param tokenId The id of the erc721 token\n   * @param liquidity The liquidity amount to remove\n   * @return amountCIL The amount received back in token0\n   * @return amountWETH The amount returned back in token1\n   */\n  function decreaseLiquidity(\n    uint256 tokenId,\n    uint128 liquidity\n  ) external returns (uint256 amountCIL, uint256 amountWETH) {\n    bool isFirst = WETH > CIL;\n\n    // caller must be the owner of the NFT\n    require(msg.sender == deposits[tokenId].owner, \"Not the owner\");\n    // liquidity should less than total\n    require(liquidity <= deposits[tokenId].liquidity, \"Invalid liquidity amount\");\n\n    // amountCILMin and amountWETHMin are price slippage checks\n    // if the amount received after burning is not greater than these minimums, transaction will fail\n    INonfungiblePositionManager.DecreaseLiquidityParams memory params = INonfungiblePositionManager\n      .DecreaseLiquidityParams({\n        tokenId: tokenId,\n        liquidity: liquidity,\n        amount0Min: 0,\n        amount1Min: 0,\n        deadline: block.timestamp\n      });\n\n    uint256 amount0;\n    uint256 amount1;\n    (amount0, amount1) = nonfungiblePositionManager.decreaseLiquidity(params);\n\n    collectAllFees(tokenId);\n\n    amountCIL = isFirst ? amount0 : amount1;\n    amountWETH = isFirst ? amount1 : amount0;\n  }\n\n  /// @notice Increases liquidity in the current range\n  /// @dev Pool must be initialized already to add liquidity\n  /// @param tokenId The id of the erc721 token\n  /// @param amountCIL The amount to add of token0\n  /// @param amountWETH The amount to add of token1\n  function increaseLiquidityCurrentRange(\n    uint256 tokenId,\n    uint256 amountAddCIL,\n    uint256 amountAddWETH\n  ) external returns (uint128 liquidity, uint256 amountCIL, uint256 amountWETH) {\n    bool isFirst = WETH > CIL;\n\n    TransferHelper.safeTransferFrom(\n      deposits[tokenId].token0,\n      msg.sender,\n      address(this),\n      amountAddCIL\n    );\n    TransferHelper.safeTransferFrom(\n      deposits[tokenId].token1,\n      msg.sender,\n      address(this),\n      amountAddWETH\n    );\n\n    TransferHelper.safeApprove(\n      deposits[tokenId].token0,\n      address(nonfungiblePositionManager),\n      amountAddCIL\n    );\n    TransferHelper.safeApprove(\n      deposits[tokenId].token1,\n      address(nonfungiblePositionManager),\n      amountAddWETH\n    );\n\n    INonfungiblePositionManager.IncreaseLiquidityParams memory params = INonfungiblePositionManager\n      .IncreaseLiquidityParams({\n        tokenId: tokenId,\n        amount0Desired: isFirst ? amountAddCIL : amountAddWETH,\n        amount1Desired: isFirst ? amountAddWETH : amountAddCIL,\n        amount0Min: 0,\n        amount1Min: 0,\n        deadline: block.timestamp\n      });\n\n    uint256 amount0;\n    uint256 amount1;\n    (liquidity, amount0, amount1) = nonfungiblePositionManager.increaseLiquidity(params);\n\n    amountCIL = isFirst ? amount0 : amount1;\n    amountWETH = isFirst ? amount1 : amount0;\n  }\n\n  /// @notice Transfers funds to owner of NFT\n  /// @param tokenId The id of the erc721\n  /// @param amount0 The amount of token0\n  /// @param amount1 The amount of token1\n  function _sendToOwner(uint256 tokenId, uint256 amount0, uint256 amount1) internal {\n    // get owner of contract\n    address owner = deposits[tokenId].owner;\n\n    address token0 = deposits[tokenId].token0;\n    address token1 = deposits[tokenId].token1;\n\n    // send collected fees to owner\n    TransferHelper.safeTransfer(token0, owner, amount0);\n    TransferHelper.safeTransfer(token1, owner, amount1);\n  }\n\n  /// @notice Transfers the NFT to the owner\n  /// @param tokenId The id of the erc721\n  function retrieveNFT(uint256 tokenId) external {\n    // must be the owner of the NFT\n    require(msg.sender == deposits[tokenId].owner, \"Not the owner\");\n    // transfer ownership to original owner\n    nonfungiblePositionManager.safeTransferFrom(address(this), msg.sender, tokenId);\n    //remove information related to tokenId\n    delete deposits[tokenId];\n  }\n}\n"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\ncontract ReentrancyGuard {\n  // Booleans are more expensive than uint256 or any type that takes up a full\n  // word because each write operation emits an extra SLOAD to first read the\n  // slot's contents, replace the bits taken up by the boolean, and then write\n  // back. This is the compiler's defense against contract upgrades and\n  // pointer aliasing, and it cannot be disabled.\n\n  // The values being non-zero value makes deployment a bit more expensive,\n  // but in exchange the refund on every call to nonReentrant will be lower in\n  // amount. Since refunds are capped to a percentage of the total\n  // transaction's gas, it is best to keep them low in cases like this one, to\n  // increase the likelihood of the full refund coming into effect.\n  uint256 private constant _NOT_ENTERED = 1;\n  uint256 private constant _ENTERED = 2;\n\n  uint256 private _status;\n\n  constructor() {\n    _status = _NOT_ENTERED;\n  }\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * Calling a `nonReentrant` function from another `nonReentrant`\n   * function is not supported. It is possible to prevent this from happening\n   * by making the `nonReentrant` function external, and make it call a\n   * `private` function that does the actual work.\n   */\n  modifier nonReentrant() {\n    // On the first call to nonReentrant, _notEntered will be true\n    require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n    // Any calls to nonReentrant after this point will fail\n    _status = _ENTERED;\n\n    _;\n\n    // By storing the original value once again, a refund is triggered (see\n    // https://eips.ethereum.org/EIPS/eip-2200)\n    _status = _NOT_ENTERED;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}